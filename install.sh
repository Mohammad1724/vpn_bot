#!/bin/bash

# ÿ±ŸÜ⁄Ø‚ÄåŸáÿß ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨€å
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ ŸÜÿµÿ® Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN${NC}"
echo "==============================================="

# ÿ™ÿßÿ®ÿπ ⁄Ü⁄© ⁄©ÿ±ÿØŸÜ ŸÖŸàŸÅŸÇ€åÿ™ ÿØÿ≥ÿ™Ÿàÿ±
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1 ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± $1${NC}"
        exit 1
    fi
}

# ÿ®ÿ±ÿ±ÿ≥€å ÿØÿ≥ÿ™ÿ±ÿ≥€å root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å root ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ (sudo)${NC}"
    exit 1
fi

echo -e "${YELLOW}üì¶ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ...${NC}"
apt update && apt upgrade -y
check_success "ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ"

echo -e "${YELLOW}üêç ŸÜÿµÿ® Python Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸÖÿ±ÿ®Ÿàÿ∑Ÿá...${NC}"
apt install python3 python3-pip python3-venv git screen nano curl -y
check_success "ŸÜÿµÿ® Python"

# ÿ®ÿ±ÿ±ÿ≥€å ŸÜÿ≥ÿÆŸá Python
PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
echo -e "${GREEN}‚úÖ Python ŸÜÿ≥ÿÆŸá $PYTHON_VERSION ŸÜÿµÿ® ÿ¥ÿØ${NC}"

echo -e "${YELLOW}üìÅ ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å Ÿæÿ±Ÿà⁄òŸá...${NC}"
PROJECT_DIR="/opt/vpn-bot"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR
check_success "ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å"

# --- ⁄Øÿ±ŸÅÿ™ŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ± ---
echo -e "${BLUE}\nüí° ŸÑÿ∑ŸÅÿßŸã ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤ ÿ±ÿ®ÿßÿ™ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:${NC}"

read -p "ÿ™Ÿà⁄©ŸÜ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿ¥ŸÖÿß (ÿßÿ≤ @BotFather ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ): " BOT_TOKEN_INPUT
read -p "ÿ¢€åÿØ€å ÿπÿØÿØ€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿßÿØŸÖ€åŸÜ (ÿ®ÿ±ÿß€å ÿØÿ±€åÿßŸÅÿ™ÿå Ÿæ€åÿßŸÖ⁄© 'myid/' ÿ±ÿß ÿ®Ÿá @userinfobot ÿ®ŸÅÿ±ÿ≥ÿ™€åÿØ): " ADMIN_ID_INPUT
read -p "ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß (ŸÖÿ´ÿßŸÑ: https://your-panel.com): " HIDDIFY_URL_INPUT
read -p "API Key ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß: " HIDDIFY_KEY_INPUT
read -p "ÿ¥ŸÜÿßÿ≥Ÿá Ÿæÿ∞€åÿ±ŸÜÿØŸá ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ÿ¥ŸÖÿß (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿß⁄Øÿ± ŸÜÿØÿßÿ±€åÿØ ÿÆÿßŸÑ€å ÿ®⁄Øÿ∞ÿßÿ±€åÿØ): " ZARINPAL_MERCHANT_INPUT
read -p "ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å ÿ®ÿ±ÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿØÿ≥ÿ™€å (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿß⁄Øÿ± ŸÜÿØÿßÿ±€åÿØ ÿÆÿßŸÑ€å ÿ®⁄Øÿ∞ÿßÿ±€åÿØ): " CARD_NUMBER_INPUT
read -p "ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å (ÿßÿÆÿ™€åÿßÿ±€å): " CARD_HOLDER_NAME_INPUT
read -p "€åŸàÿ≤ÿ±ŸÜ€åŸÖ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ¥ŸÖÿß (ŸÖÿ´ÿßŸÑ: @my_support): " SUPPORT_USERNAME_INPUT
read -p "ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ¥ŸÖÿß (ŸÖÿ´ÿßŸÑ: 09123456789): " SUPPORT_PHONE_INPUT
read -p "ÿ¢ÿØÿ±ÿ≥ Ÿàÿ®‚ÄåŸáŸà⁄© ÿ±ÿ®ÿßÿ™ (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿ®ÿ±ÿß€å ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ): " WEBHOOK_URL_INPUT

# --- ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá ---
echo -e "${YELLOW}\nüìù ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá...${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ config.py ÿ®ÿß ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿàÿ±ŸàÿØ€å ⁄©ÿßÿ±ÿ®ÿ±
cat > config.py << EOF
"""
ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN
"""

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
BOT_TOKEN = "$BOT_TOKEN_INPUT"

# ŸÑ€åÿ≥ÿ™ ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
ADMIN_IDS = [$ADMIN_ID_INPUT]

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÜŸÑ HiddiFy  
HIDDIFY_API_URL = "$HIDDIFY_URL_INPUT"
HIDDIFY_API_KEY = "$HIDDIFY_KEY_INPUT"

# ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ
ZARINPAL_MERCHANT_ID = "$ZARINPAL_MERCHANT_INPUT"

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™
CARD_NUMBER = "$CARD_NUMBER_INPUT"
CARD_HOLDER_NAME = "$CARD_HOLDER_NAME_INPUT"

# Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
SUPPORT_USERNAME = "$SUPPORT_USERNAME_INPUT"
SUPPORT_PHONE = "$SUPPORT_PHONE_INPUT"

# Ÿàÿ®‚ÄåŸáŸà⁄© (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿ®ÿ±ÿß€å ÿ™ÿ£€å€åÿØ ÿÆŸàÿØ⁄©ÿßÿ± Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)
BOT_WEBHOOK_URL = "$WEBHOOK_URL_INPUT" 
EOF
echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ config.py ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ requirements.txt
cat > requirements.txt << EOF
pyTelegramBotAPI==4.14.0
requests==2.31.0
EOF
echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ requirements.txt ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ bot.py (ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ bot.py ÿ®ÿß€åÿØ ÿß€åŸÜÿ¨ÿß ŸÇÿ±ÿßÿ± ⁄Ø€åÿ±ÿØ)
# ÿ™Ÿàÿ¨Ÿá: ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ bot.py ÿØÿ± ÿßÿØÿßŸÖŸá ÿ™Ÿàÿ∂€åÿ≠ ÿØÿßÿØŸá ÿ¥ÿØŸá ÿßÿ≥ÿ™ÿå ÿßŸÖÿß ÿ®ÿ±ÿß€å ÿÆŸàÿØ⁄©ÿßÿ±ÿ≥ÿßÿ≤€åÿå ÿ®ÿß€åÿØ ÿ¢ŸÜ ÿ±ÿß ÿß€åŸÜÿ¨ÿß ÿ¨ÿß€å⁄Øÿ∞ÿßÿ±€å ⁄©ŸÜ€åÿØ.
cat > bot.py << 'EOF'
import telebot
import sqlite3
import json
import requests
from datetime import datetime, timedelta
import uuid
import os
from config import *

# ==================== Database Manager ====================
class DatabaseManager:
    def __init__(self):
        self.db_name = 'vpn_bot.db'
        self.init_database()
    
    def init_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ÿ¨ÿØŸàŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                phone TEXT,
                join_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS services (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                duration_days INTEGER,
                traffic_gb INTEGER,
                description TEXT
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_id INTEGER,
                amount INTEGER,
                status TEXT DEFAULT 'pending',
                payment_id TEXT,
                config_url TEXT,
                created_at TEXT,
                expires_at TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂ ŸÅŸÇÿ∑ ÿØÿ± ÿµŸàÿ±ÿ™€å ⁄©Ÿá ÿ¨ÿØŸàŸÑ€å ÿÆÿßŸÑ€å ÿ®ÿßÿ¥ÿØ
        self.add_default_services()
    
    def add_default_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM services')
        
        if cursor.fetchone()[0] == 0:
            default_services = [
                ("Ÿæ⁄©€åÿ¨ €± ŸÖÿßŸáŸá - €µ€∞ ⁄Ø€å⁄Ø", 50000, 30, 50, "ŸÖŸÜÿßÿ≥ÿ® ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ÿÆÿµ€å ÿ±Ÿàÿ≤ÿßŸÜŸá"),
                ("Ÿæ⁄©€åÿ¨ €≥ ŸÖÿßŸáŸá - €±€µ€∞ ⁄Ø€å⁄Ø", 120000, 90, 150, "Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±ÿ™ÿ±€åŸÜ Ÿæ⁄©€åÿ¨ - €≥€≥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ €∂ ŸÖÿßŸáŸá - €≥€∞€∞ ⁄Ø€å⁄Ø", 200000, 180, 300, "ÿ®Ÿáÿ™ÿ±€åŸÜ ŸÇ€åŸÖÿ™ - €¥€¥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ Ÿà€å⁄òŸá - ŸÜÿßŸÖÿ≠ÿØŸàÿØ", 300000, 365, 1000, "€å⁄© ÿ≥ÿßŸÑ ⁄©ÿßŸÖŸÑ ÿ®ÿß ÿ™ÿ±ÿßŸÅ€å⁄© ŸÅÿ±ÿßŸàÿßŸÜ")
            ]
            
            cursor.executemany('''
                INSERT INTO services (name, price, duration_days, traffic_gb, description)
                VALUES (?, ?, ?, ?, ?)
            ''', default_services)
            conn.commit()
        
        conn.close()
    
    def add_user(self, user_id, username):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, join_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, datetime.now().isoformat()))
        conn.commit()
        conn.close()
    
    def get_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id > 0')
        services = cursor.fetchall()
        conn.close()
        return services
    
    def get_service(self, service_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id = ?', (service_id,))
        service = cursor.fetchone()
        conn.close()
        return service
    
    def add_order(self, user_id, service_id, amount):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        order_id = str(uuid.uuid4())[:8].upper()
        cursor.execute('''
            INSERT INTO orders (user_id, service_id, amount, payment_id, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, service_id, amount, order_id, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        return order_id
    
    def get_order(self, order_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, s.name, s.duration_days, s.traffic_gb 
            FROM orders o 
            JOIN services s ON o.service_id = s.id 
            WHERE o.payment_id = ?
        ''', (order_id,))
        order = cursor.fetchone()
        conn.close()
        return order
    
    def update_order_status(self, order_id, status, config_url=None):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        if config_url:
            order = self.get_order(order_id)
            if order:
                duration_days = order[10] # order[10] is duration_days
                expire_date = datetime.now() + timedelta(days=duration_days)
                cursor.execute('''
                    UPDATE orders 
                    SET status = ?, config_url = ?, expires_at = ?
                    WHERE payment_id = ?
                ''', (status, config_url, expire_date.isoformat(), order_id))
        else:
            cursor.execute('''
                UPDATE orders 
                SET status = ?
                WHERE payment_id = ?
            ''', (status, order_id))
        
        conn.commit()
        conn.close()
    
    def get_stats(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('SELECT COUNT(*) FROM orders WHERE created_at LIKE ?', (f'{today}%',))
        today_orders = cursor.fetchone()[0]
        
        # ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤
        cursor.execute('SELECT SUM(amount) FROM orders WHERE created_at LIKE ? AND status = "active"', (f'{today}%',))
        today_income = cursor.fetchone()[0] or 0
        
        # ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ
        cursor.execute('SELECT SUM(amount) FROM orders WHERE status = "active"')
        total_income = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_users': total_users,
            'today_orders': today_orders,
            'today_income': today_income,
            'total_income': total_income
        }

    def add_service(self, name, price, duration, traffic, description):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO services (name, price, duration_days, traffic_gb, description)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, price, duration, traffic, description))
        conn.commit()
        conn.close()

    def update_service(self, service_id, name, price, duration, traffic, description):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE services 
            SET name = ?, price = ?, duration_days = ?, traffic_gb = ?, description = ?
            WHERE id = ?
        ''', (name, price, duration, traffic, description, service_id))
        conn.commit()
        conn.close()

    def delete_service(self, service_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM services WHERE id = ?', (service_id,))
        conn.commit()
        conn.close()


# ==================== Hiddify Manager ====================
class HiddifyManager:
    def __init__(self):
        self.api_url = HIDDIFY_API_URL.rstrip('/')
        self.api_key = HIDDIFY_API_KEY
    
    def test_connection(self):
        """ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            # Try to get a small list of users to confirm connection
            response = requests.get(f'{self.api_url}/api/v1/admin/user/?limit=1', 
                                  headers=headers, timeout=10)
            return response.status_code == 200
        except Exception as e:
            print(f"Hiddify connection test failed: {e}")
            return False
    
    def create_user(self, username, traffic_limit_gb, expire_days):
        """ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ ÿØÿ± ŸæŸÜŸÑ HiddiFy"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'name': username,
                'usage_limit_GB': traffic_limit_gb,
                'package_days': expire_days,
                'mode': 'no_reset',
                'comment': f'Created by bot - {datetime.now().strftime("%Y-%m-%d %H:%M")}'
            }
            
            response = requests.post(f'{self.api_url}/api/v1/admin/user/', 
                                   json=data, headers=headers, timeout=30)
            
            if response.status_code in [200, 201]:
                result = response.json()
                # Hiddify API might return 'subscription_url' or 'config_url'
                return result.get('subscription_url') or result.get('config_url')
            
            print(f"Hiddify user creation failed: {response.status_code} - {response.text}")
            return None
            
        except Exception as e:
            print(f"Error creating user: {e}")
            return None

# ==================== Payment Manager ====================
class PaymentManager:
    def __init__(self):
        self.zarinpal_merchant = ZARINPAL_MERCHANT_ID
    
    def create_payment_url(self, amount, description, order_id):
        """ÿß€åÿ¨ÿßÿØ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ"""
        if not self.zarinpal_merchant:
            return None
            
        try:
            data = {
                'merchant_id': self.zarinpal_merchant,
                'amount': amount,
                'description': description,
                'callback_url': f'{BOT_WEBHOOK_URL}/verify/{order_id}' if BOT_WEBHOOK_URL else 'https://example.com'
            }
            
            response = requests.post(
                'https://api.zarinpal.com/pg/v4/payment/request.json',
                json=data, timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('data', {}).get('code') == 100:
                    authority = result['data']['authority']
                    return f"https://www.zarinpal.com/pg/StartPay/{authority}"
            
            print(f"Zarinpal payment request failed: {response.status_code} - {response.text}")
            return None
            
        except Exception as e:
            print(f"Error creating Zarinpal payment URL: {e}")
            return None

# ÿß€åÿ¨ÿßÿØ instance Ÿáÿß
db = DatabaseManager()
hiddify = HiddifyManager()
payment = PaymentManager()
bot = telebot.TeleBot(BOT_TOKEN)

# ==================== Keyboards ====================
def main_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service"),
        telebot.types.InlineKeyboardButton("üíé ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_services")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support"),
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help")
    )
    return keyboard

def services_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    services = db.get_services()
    
    for service in services:
        discount = ""
        if service[3] >= 90:  # ÿ®€åÿ¥ ÿßÿ≤ 3 ŸÖÿßŸá
            discount = " üî•"
        
        text = f"üì± {service[1]} - {service[2]:,} ÿ™ŸàŸÖÿßŸÜ{discount}"
        keyboard.add(telebot.types.InlineKeyboardButton(
            text, callback_data=f"service_{service[0]}"
        ))
    
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    return keyboard

def admin_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ±", callback_data="admin_stats"),
        telebot.types.InlineKeyboardButton("üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_users")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üì¶ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß", callback_data="admin_services"),
        telebot.types.InlineKeyboardButton("üí∞ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™", callback_data="admin_orders")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üîß ÿ™ÿ≥ÿ™ ÿ≥€åÿ≥ÿ™ŸÖ", callback_data="admin_test"),
        telebot.types.InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="back_main")
    )
    return keyboard

def admin_services_manage_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("‚ûï ÿßŸÅÿ≤ŸàÿØŸÜ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="admin_add_service"),
        telebot.types.InlineKeyboardButton("‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="admin_edit_service_list")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üóëÔ∏è ÿ≠ÿ∞ŸÅ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="admin_delete_service_list")
    )
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
    return keyboard

# ==================== Handlers ====================
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    db.add_user(user_id, username)
    
    welcome_text = f"""
üî• ÿ≥ŸÑÿßŸÖ {message.from_user.first_name} ÿπÿ≤€åÿ≤!

ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN Ÿæÿ±ÿ≥ÿ±ÿπÿ™ ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å! üöÄ

üåü Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿÆÿßÿµ ŸÖÿß:
‚úÖ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá ÿ®ÿßŸÑÿß
‚úÖ Ÿæÿß€åÿØÿßÿ±€å €π€π.€πŸ™ 
‚úÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å €≤€¥ ÿ≥ÿßÿπÿ™Ÿá
‚úÖ ŸÇ€åŸÖÿ™‚ÄåŸáÿß€å ÿßÿ≥ÿ™ÿ´ŸÜÿß€å€å
‚úÖ ŸÜÿµÿ® ÿ¢ÿ≥ÿßŸÜ ÿ±Ÿà€å ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
‚úÖ ÿ®ÿØŸàŸÜ ŸÇÿ∑ÿπ€å Ÿà ŸÅ€åŸÑÿ™ÿ±€åŸÜ⁄Ø

üíé Ÿà€å⁄òŸá ÿß€åŸÜ ŸÖÿßŸá: ÿ™ÿÆŸÅ€åŸÅ ÿ™ÿß €µ€∞Ÿ™ ÿ±Ÿà€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!

ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id in ADMIN_IDS:
        admin_text = """
üîß ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™

ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å ŸÖÿØ€åÿ± ÿπÿ≤€åÿ≤!
ÿßÿ≤ ŸÖŸÜŸà€å ÿ≤€åÿ± ⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
        bot.send_message(message.chat.id, admin_text, reply_markup=admin_keyboard())
    else:
        bot.reply_to(message, "‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿßÿØŸÖ€åŸÜ ŸÜÿØÿßÿ±€åÿØ!")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    
    try:
        if call.data == "buy_service":
            show_services(call)
        
        elif call.data.startswith("service_"):
            service_id = int(call.data.split("_")[1])
            show_service_details(call, service_id)
        
        elif call.data.startswith("buy_"):
            service_id = int(call.data.split("_")[1])
            start_purchase(call, service_id)
        
        elif call.data.startswith("paid_"):
            order_id = call.data.split("_")[1]
            handle_payment_confirmation(call, order_id)
        
        elif call.data == "my_services":
            show_user_services(call)
        
        elif call.data == "support":
            show_support_info(call)
        
        elif call.data == "help":
            show_help(call)
        
        elif call.data == "back_main":
            show_main_menu(call)
        
        # ÿßÿØŸÖ€åŸÜ handlers
        elif call.data.startswith("admin_") and user_id in ADMIN_IDS:
            handle_admin_callback(call)
            
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™!")
        print(f"Callback error: {e}")

def show_services(call):
    text = """
üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å VPN

üíé Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å Ÿà€å⁄òŸá ŸÖÿß:

üî• ÿ™ÿÆŸÅ€åŸÅ‚ÄåŸáÿß€å Ÿà€å⁄òŸá ÿ®ÿ±ÿß€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!
‚ö° ÿ≥ÿ±ÿπÿ™ ÿ®ÿßŸÑÿß Ÿà Ÿæÿß€åÿØÿßÿ±€å ÿ™ÿ∂ŸÖ€åŸÜ€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß Ÿà ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß

Ÿæ⁄©€åÿ¨ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=services_keyboard())

def show_service_details(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ™ÿÆŸÅ€åŸÅ
    discount_text = ""
    if service[3] >= 180:  # 6 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €¥€¥Ÿ™ - Ÿæ€åÿ¥ŸÜŸáÿßÿØ Ÿà€å⁄òŸá!"
    elif service[3] >= 90:  # 3 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €≥€≥Ÿ™ - Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±!"
    
    text = f"""
üì± {service[1]}

üí∞ ŸÇ€åŸÖÿ™: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
‚è± ŸÖÿØÿ™: {service[3]} ÿ±Ÿàÿ≤  
üìä ÿ≠ÿ¨ŸÖ: {service[4]} ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™
üìù {service[5]}{discount_text}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ú® ŸÖÿ≤ÿß€åÿß€å ÿß€åŸÜ Ÿæ⁄©€åÿ¨:

üöÄ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá (ÿ™ÿß €∏€∞ ŸÖ⁄Ø)
üõ°Ô∏è ÿßŸÖŸÜ€åÿ™ ⁄©ÿßŸÖŸÑ Ÿà ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ŸÇŸà€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß
üì± ÿ≥ÿßÿ≤⁄Øÿßÿ± ÿ®ÿß ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
üîÑ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ŸáŸÖŸá Ÿæÿ±Ÿàÿ™⁄©ŸÑ‚ÄåŸáÿß
‚ö° ÿßÿ™ÿµÿßŸÑ ŸÅŸàÿ±€å ÿ®ÿØŸàŸÜ ÿ™ÿ£ÿÆ€åÿ±
üéØ IP ÿßÿÆÿ™ÿµÿßÿµ€å Ÿà ÿ™ŸÖ€åÿ≤

üíé ⁄Øÿßÿ±ÿßŸÜÿ™€å €±€∞€∞Ÿ™ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ Ÿàÿ¨Ÿá ÿØÿ± ÿµŸàÿ±ÿ™ ÿπÿØŸÖ ÿ±ÿ∂ÿß€åÿ™
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(
        f"üí≥ ÿÆÿ±€åÿØ {service[2]:,} ÿ™ŸàŸÖÿßŸÜ", 
        callback_data=f"buy_{service_id}"
    ))
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="buy_service"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def start_purchase(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    user_id = call.from_user.id
    order_id = db.add_order(user_id, service_id, service[2])
    
    # ÿ≥ÿßÿÆÿ™ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™
    payment_url = payment.create_payment_url(
        service[2], 
        f"ÿÆÿ±€åÿØ {service[1]}", 
        order_id
    )
    
    payment_text = f"""
üí≥ ÿµŸàÿ±ÿ™ÿ≠ÿ≥ÿßÿ® ÿÆÿ±€åÿØ

üì± ÿ≥ÿ±Ÿà€åÿ≥: {service[1]}
üí∞ ŸÖÿ®ŸÑÿ∫: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí≥ ÿ±Ÿàÿ¥‚ÄåŸáÿß€å Ÿæÿ±ÿØÿßÿÆÿ™:
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    
    if payment_url:
        keyboard.add(telebot.types.InlineKeyboardButton(
            "üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ (ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)", url=payment_url
        ))
    
    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™
    if CARD_NUMBER and CARD_HOLDER_NAME:
        payment_text += f"""

üí≥ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™:

{CARD_NUMBER}
ÿ®Ÿá ŸÜÿßŸÖ: {CARD_HOLDER_NAME}

üì± ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ ÿ¨Ÿáÿ™ ÿ™ÿ£€å€åÿØ:
{SUPPORT_PHONE}
"""
        
    keyboard.add(telebot.types.InlineKeyboardButton(
        "‚úÖ Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿ±ÿØŸÖ", callback_data=f"paid_{order_id}"
    ))
    keyboard.add(telebot.types.InlineKeyboardButton(
        "‚ùå ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="back_main"
    ))
    
    payment_text += "\n\n‚ö†Ô∏è ÿ®ÿπÿØ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ÿØ⁄©ŸÖŸá 'Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿ±ÿØŸÖ' ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ."
    
    bot.edit_message_text(payment_text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard, 
                        parse_mode='Markdown')

def handle_payment_confirmation(call, order_id):
    order = db.get_order(order_id)
    if not order:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    text = f"""
‚úÖ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¥ŸÖÿß ÿ´ÿ®ÿ™ ÿ¥ÿØ!

üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}
üì± ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
üí∞ ŸÖÿ®ŸÑÿ∫: {order[3]:,} ÿ™ŸàŸÖÿßŸÜ

üìã Ÿàÿ∂ÿπ€åÿ™: ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™

‚è∞ ÿ≤ŸÖÿßŸÜ ÿ®ÿ±ÿ±ÿ≥€å: ÿ≠ÿØÿß⁄©ÿ´ÿ± €±€∞ ÿØŸÇ€åŸÇŸá
üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: {SUPPORT_USERNAME}

‚ú® ÿ®ÿπÿØ ÿßÿ≤ ÿ™ÿ£€å€åÿØÿå ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ŸÅŸàÿ±ÿßŸã ŸÅÿπÿßŸÑ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ!
"""
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    
    # ÿßÿ∑ŸÑÿßÿπ ÿ®Ÿá ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
    admin_text = f"""
üîî ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¨ÿØ€åÿØ!

üë§ ⁄©ÿßÿ±ÿ®ÿ±: {call.from_user.first_name}
üÜî €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{call.from_user.username or 'ŸÜÿØÿßÿ±ÿØ'}
üì± ÿ¢€åÿØ€å: {call.from_user.id}

üõí ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
üí∞ ŸÖÿ®ŸÑÿ∫: {order[3]:,} ÿ™ŸàŸÖÿßŸÜ
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

ÿ®ÿ±ÿß€å ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å: /activate {order_id}
"""
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, admin_text)
        except:
            pass

def show_user_services(call):
    # ÿß€åŸÜÿ¨ÿß ŸÖ€å‚Äåÿ™ŸàŸÜ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ ⁄©ÿßÿ±ÿ®ÿ± ÿ±Ÿà ŸÜŸÖÿß€åÿ¥ ÿ®ÿØ€åÿØ
    text = """
üíé ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿ¥ŸÖÿß

ŸÖÿ™ÿ£ÿ≥ŸÅÿßŸÜŸá ŸáŸÜŸàÿ≤ ÿ≥ÿ±Ÿà€åÿ≥€å ŸÅÿπÿßŸÑ ŸÜÿØÿßÿ±€åÿØ.
ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¨ÿØ€åÿØ ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.

üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: @YourSupportUsername
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service"))
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_support_info(call):
    text = f"""
üìû ÿ±ÿßŸá‚ÄåŸáÿß€å ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å

üÜî ÿ™ŸÑ⁄Øÿ±ÿßŸÖ: {SUPPORT_USERNAME}
üì± ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥: {SUPPORT_PHONE}

‚è∞ ÿ≥ÿßÿπÿßÿ™ Ÿæÿßÿ≥ÿÆ⁄ØŸà€å€å:
üåÖ ÿµÿ®ÿ≠: €π:€∞€∞ ÿ™ÿß €±€≤:€∞€∞
üåÜ ÿπÿµÿ±: €±€∂:€∞€∞ ÿ™ÿß €≤€≥:€∞€∞

üí¨ ÿ®ÿ±ÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ≥ÿ±€åÿπ‚Äåÿ™ÿ±ÿå ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥ ÿÆŸàÿØ ÿ±ÿß ŸáŸÖÿ±ÿßŸá Ÿæ€åÿßŸÖ ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ.

‚ú® ÿ™€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÖÿß ÿ¢ŸÖÿßÿØŸá ⁄©ŸÖ⁄© ÿ®Ÿá ÿ¥ŸÖÿß Ÿáÿ≥ÿ™ŸÜÿØ!
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_help(call):
    text = """
‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá

üì± ŸÜÿ≠ŸàŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿ≥ÿ±Ÿà€åÿ≥:

1Ô∏è‚É£ €å⁄©€å ÿßÿ≤ Ÿæ⁄©€åÿ¨‚ÄåŸáÿß ÿ±ÿß ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ ÿ®ÿπÿØ ÿßÿ≤ ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ
3Ô∏è‚É£ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ ŸÖŸÜÿßÿ≥ÿ® ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ:
   ‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: v2rayNG €åÿß Hiddify
   ‚Ä¢ ÿ¢€åŸÅŸàŸÜ: Fair VPN €åÿß Streisand  
   ‚Ä¢ Ÿà€åŸÜÿØŸàÿ≤: v2rayN €åÿß Hiddify
   ‚Ä¢ ŸÖ⁄©: ClashX €åÿß V2rayU

4Ô∏è‚É£ ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ±ÿß ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ
5Ô∏è‚É£ ÿ±Ÿà€å Connect ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ

üîó ŸÑ€åŸÜ⁄© ÿØÿßŸÜŸÑŸàÿØ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß:
‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: bit.ly/v2rayng-app
‚Ä¢ ÿ¢€åŸÅŸàŸÜ: bit.ly/fair-vpn-app

‚ùì ÿ≥ŸàÿßŸÑÿßÿ™ ŸÖÿ™ÿØÿßŸàŸÑ ÿØÿ± ⁄©ÿßŸÜÿßŸÑ: @YourChannelUsername

üéØ ÿ®ÿ±ÿß€å ÿ±ÿßŸáŸÜŸÖÿß€å€å ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_main_menu(call):
    text = """
üè† ŸÖŸÜŸà€å ÿßÿµŸÑ€å

ÿÆŸàÿ¥ ÿ®ÿ±⁄Øÿ¥ÿ™€å! üéâ
€å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=main_keyboard())

def handle_admin_callback(call):
    if call.data == "admin_stats":
        stats = db.get_stats()
        stats_text = f"""
üìä ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å ÿ±ÿ®ÿßÿ™

üë• ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']:,}
üì¶ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_orders']}
üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_income']:,} ÿ™ŸàŸÖÿßŸÜ
üíé ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {stats['total_income']:,} ÿ™ŸàŸÖÿßŸÜ

üîß Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ: {"‚úÖ ÿπÿßÿØ€å" if hiddify.test_connection() else "‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ"}

üìÖ {datetime.now().strftime('%Y/%m/%d %H:%M')}
"""
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="admin_stats"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        
        bot.edit_message_text(stats_text, call.message.chat.id, 
                            call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "admin_test":
        hiddify_status = "‚úÖ ŸÖÿ™ÿµŸÑ" if hiddify.test_connection() else "‚ùå ŸÇÿ∑ÿπ"
        
        test_text = f"""
üîß ÿ™ÿ≥ÿ™ ÿ≥€åÿ≥ÿ™ŸÖ

üåê ÿßÿ™ÿµÿßŸÑ HiddiFy: {hiddify_status}
üí≥ ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™: {"‚úÖ ŸÅÿπÿßŸÑ" if payment.zarinpal_merchant else "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"}
üíæ ÿØ€åÿ™ÿßÿ®€åÿ≥: ‚úÖ ŸÅÿπÿßŸÑ

üì° ÿ¢ÿØÿ±ÿ≥ API: {HIDDIFY_API_URL}
üîë ⁄©ŸÑ€åÿØ API: {"‚úÖ ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØŸá" if HIDDIFY_API_KEY else "‚ùå ÿ™ŸÜÿ∏€åŸÖ ŸÜÿ¥ÿØŸá"}

‚öôÔ∏è ÿ™ÿ≥ÿ™ ÿ¥ÿØŸá ÿØÿ±: {datetime.now().strftime('%H:%M:%S')}
"""
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîÑ ÿ™ÿ≥ÿ™ ŸÖÿ¨ÿØÿØ", callback_data="admin_test"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        
        bot.edit_message_text(test_text, call.message.chat.id, 
                            call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "admin_users":
        conn = sqlite3.connect(db.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, join_date FROM users ORDER BY join_date DESC LIMIT 10')
        users = cursor.fetchall()
        conn.close()

        user_list_text = "üë• **€±€∞ ⁄©ÿßÿ±ÿ®ÿ± ÿßÿÆ€åÿ±:**\n\n"
        if users:
            for user in users:
                user_list_text += f"‚ñ™Ô∏è ID: `{user[0]}`\n"
                user_list_text += f"   €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{user[1] or 'ŸÜÿØÿßÿ±ÿØ'}\n"
                user_list_text += f"   ÿ™ÿßÿ±€åÿÆ ÿπÿ∂Ÿà€åÿ™: {datetime.fromisoformat(user[2]).strftime('%Y/%m/%d')}\n"
                user_list_text += "----------\n"
        else:
            user_list_text = "⁄©ÿßÿ±ÿ®ÿ±€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        bot.edit_message_text(user_list_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

    elif call.data == "admin_orders":
        conn = sqlite3.connect(db.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.payment_id, o.amount, o.status, o.created_at, s.name, o.user_id
            FROM orders o
            JOIN services s ON o.service_id = s.id  
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = cursor.fetchall()
        conn.close()

        orders_text = "üìã **€±€∞ ÿ≥ŸÅÿßÿ±ÿ¥ ÿßÿÆ€åÿ±:**\n\n"
        if orders:
            for order in orders:
                status_emoji = "‚úÖ" if order[2] == "active" else "‚è≥" if order[2] == "pending" else "‚ùå"
                date = datetime.fromisoformat(order[3]).strftime('%m/%d %H:%M')
                
                orders_text += f"""
{status_emoji} #{order[0]}
üí∞ {order[1]:,} ÿ™ŸàŸÖÿßŸÜ - {order[4]}
üë§ ⁄©ÿßÿ±ÿ®ÿ±: `{order[5]}` | üìÖ {date}
{'‚îÄ' * 35}
"""
        else:
            orders_text = "ÿ≥ŸÅÿßÿ±ÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        bot.edit_message_text(orders_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

    elif call.data == "admin_services":
        # ŸÜŸÖÿß€åÿ¥ ŸÖŸÜŸà€å ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß
        services = db.get_services()
        service_list_text = "üì¶ **ŸÑ€åÿ≥ÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß:**\n\n"
        if services:
            for service in services:
                service_list_text += f"‚ñ™Ô∏è ID: `{service[0]}`\n"
                service_list_text += f"   ŸÜÿßŸÖ: {service[1]}\n"
                service_list_text += f"   ŸÇ€åŸÖÿ™: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ\n"
                service_list_text += f"   ŸÖÿØÿ™: {service[3]} ÿ±Ÿàÿ≤\n"
                service_list_text += f"   ÿ≠ÿ¨ŸÖ: {service[4]} GB\n"
                service_list_text += "----------\n"
        else:
            service_list_text = "ÿ≥ÿ±Ÿà€åÿ≥€å ÿ™ÿπÿ±€åŸÅ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™."
        
        bot.edit_message_text(service_list_text, call.message.chat.id, call.message.message_id, reply_markup=admin_services_manage_keyboard(), parse_mode='Markdown')
        
    elif call.data == "admin_add_service":
        msg = bot.send_message(call.message.chat.id, "‚ûï ŸÑÿ∑ŸÅÿßŸã ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿØÿ± €å⁄© ÿÆÿ∑ Ÿà ÿ®ÿß ŸÅÿ±ŸÖÿ™ ÿ≤€åÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n\n`ŸÜÿßŸÖ_ÿ≥ÿ±Ÿà€åÿ≥ ŸÇ€åŸÖÿ™ ŸÖÿØÿ™_ÿ±Ÿàÿ≤ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™`\n\nŸÖÿ´ÿßŸÑ: `Ÿæ⁄©€åÿ¨_€å⁄©_ŸÖÿßŸáŸá 50000 30 50 ŸÖŸÜÿßÿ≥ÿ®_ÿßÿ≥ÿ™ŸÅÿßÿØŸá_ÿ¥ÿÆÿµ€å`")
        bot.register_next_step_handler(msg, add_service_step)

    elif call.data == "admin_edit_service_list":
        services = db.get_services()
        if not services:
            bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥€å ÿ®ÿ±ÿß€å Ÿà€åÿ±ÿß€åÿ¥ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ!")
            return
        
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        for service in services:
            keyboard.add(telebot.types.InlineKeyboardButton(f"‚úèÔ∏è {service[1]} (ID: {service[0]})", callback_data=f"edit_service_{service[0]}"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services"))
        
        bot.edit_message_text("‚úèÔ∏è ÿ≥ÿ±Ÿà€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ÿ±ÿß€å Ÿà€åÿ±ÿß€åÿ¥ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    elif call.data.startswith("edit_service_"):
        service_id = int(call.data.split("_")[2])
        service = db.get_service(service_id)
        if not service:
            bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
            return
        
        msg = bot.send_message(call.message.chat.id, f"‚úèÔ∏è ÿ®ÿ±ÿß€å Ÿà€åÿ±ÿß€åÿ¥ ÿ≥ÿ±Ÿà€åÿ≥ **{service[1]} (ID: {service_id})**ÿå ŸÑÿ∑ŸÅÿßŸã ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ¨ÿØ€åÿØ ÿ±ÿß ÿØÿ± €å⁄© ÿÆÿ∑ Ÿà ÿ®ÿß ŸÅÿ±ŸÖÿ™ ÿ≤€åÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:\n\n`ŸÜÿßŸÖ_ÿ¨ÿØ€åÿØ ŸÇ€åŸÖÿ™_ÿ¨ÿØ€åÿØ ŸÖÿØÿ™_ÿ±Ÿàÿ≤_ÿ¨ÿØ€åÿØ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø_ÿ¨ÿØ€åÿØ ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™_ÿ¨ÿØ€åÿØ`\n\n(ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸÇÿ®ŸÑ€å ÿ±ÿß ÿ®ÿ®€åŸÜ€åÿØ: `{service[1]} {service[2]} {service[3]} {service[4]} {service[5]}`)\n\nŸÖÿ´ÿßŸÑ: `Ÿæ⁄©€åÿ¨_ŸæŸÑÿßÿ≥ 60000 30 60 Ÿæ⁄©€åÿ¨_ÿ®Ÿáÿ™ÿ±`", parse_mode='Markdown')
        bot.register_next_step_handler(msg, lambda m: edit_service_step(m, service_id))

    elif call.data == "admin_delete_service_list":
        services = db.get_services()
        if not services:
            bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥€å ÿ®ÿ±ÿß€å ÿ≠ÿ∞ŸÅ Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ±ÿØ!")
            return
        
        keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
        for service in services:
            keyboard.add(telebot.types.InlineKeyboardButton(f"üóëÔ∏è {service[1]} (ID: {service[0]})", callback_data=f"delete_service_{service[0]}"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="admin_services"))
        
        bot.edit_message_text("üóëÔ∏è ÿ≥ÿ±Ÿà€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ®ÿ±ÿß€å ÿ≠ÿ∞ŸÅ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", call.message.chat.id, call.message.message_id, reply_markup=keyboard)

    elif call.data.startswith("delete_service_"):
        service_id = int(call.data.split("_")[2])
        service = db.get_service(service_id)
        if not service:
            bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
            return
        
        db.delete_service(service_id)
        bot.answer_callback_query(call.id, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ '{service[1]}' ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
        # Refresh the services list
        handle_admin_callback(call) # Re-call to update the message with new list
        
    elif call.data == "admin_back":
        admin_command(call.message)

# ==================== Admin Commands for Services ====================
def add_service_step(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤!")
        return
    
    try:
        parts = message.text.split(maxsplit=4) # Split into 5 parts: name, price, duration, traffic, description
        if len(parts) != 5:
            msg = bot.send_message(message.chat.id, """
‚ùå ŸÅÿ±ŸÖÿ™ ŸÜÿßÿØÿ±ÿ≥ÿ™!

‚úÖ ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠:
`ŸÜÿßŸÖ_ÿ≥ÿ±Ÿà€åÿ≥ ŸÇ€åŸÖÿ™ ŸÖÿØÿ™_ÿ±Ÿàÿ≤ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™`

üìù ŸÖÿ´ÿßŸÑ:
`Ÿæ⁄©€åÿ¨_ÿ¨ÿØ€åÿØ 75000 60 100 Ÿæ⁄©€åÿ¨_ÿØŸà_ŸÖÿßŸáŸá_ÿ®ÿß_ÿ™ÿÆŸÅ€åŸÅ`
""")
            bot.register_next_step_handler(msg, add_service_step) # Ask again
            return
        
        name = parts[0].replace('_', ' ')
        price = int(parts[1])
        duration = int(parts[2])
        traffic = int(parts[3])
        description = parts[4].replace('_', ' ')
        
        db.add_service(name, price, duration, traffic, description)
        bot.send_message(message.chat.id, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ '{name}' ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ!")
        
        # Display updated services list
        call = telebot.types.CallbackQuery(id=0, from_user=message.from_user, message=message, data="admin_services")
        handle_admin_callback(call)
        
    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå ŸÇ€åŸÖÿ™ÿå ŸÖÿØÿ™ Ÿà ÿ≠ÿ¨ŸÖ ÿ®ÿß€åÿØ ÿπÿØÿØ ÿ®ÿßÿ¥ŸÜÿØ!\nŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
        bot.register_next_step_handler(msg, add_service_step)
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")
        call = telebot.types.CallbackQuery(id=0, from_user=message.from_user, message=message, data="admin_services")
        handle_admin_callback(call)

def edit_service_step(message, service_id):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤!")
        return
    
    try:
        parts = message.text.split(maxsplit=4) # Split into 5 parts
        if len(parts) != 5:
            msg = bot.send_message(message.chat.id, """
‚ùå ŸÅÿ±ŸÖÿ™ ŸÜÿßÿØÿ±ÿ≥ÿ™ ÿ®ÿ±ÿß€å Ÿà€åÿ±ÿß€åÿ¥!

‚úÖ ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠:
`ŸÜÿßŸÖ_ÿ¨ÿØ€åÿØ ŸÇ€åŸÖÿ™_ÿ¨ÿØ€åÿØ ŸÖÿØÿ™_ÿ±Ÿàÿ≤_ÿ¨ÿØ€åÿØ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø_ÿ¨ÿØ€åÿØ ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™_ÿ¨ÿØ€åÿØ`

ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.
""")
            bot.register_next_step_handler(msg, lambda m: edit_service_step(m, service_id))
            return
        
        name = parts[0].replace('_', ' ')
        price = int(parts[1])
        duration = int(parts[2])
        traffic = int(parts[3])
        description = parts[4].replace('_', ' ')
        
        db.update_service(service_id, name, price, duration, traffic, description)
        bot.send_message(message.chat.id, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿß ID **{service_id}** ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ Ÿà€åÿ±ÿß€åÿ¥ ÿ¥ÿØ.")
        
        # Display updated services list
        call = telebot.types.CallbackQuery(id=0, from_user=message.from_user, message=message, data="admin_services")
        handle_admin_callback(call)

    except ValueError:
        msg = bot.send_message(message.chat.id, "‚ùå ŸÇ€åŸÖÿ™ÿå ŸÖÿØÿ™ Ÿà ÿ≠ÿ¨ŸÖ ÿ®ÿß€åÿØ ÿπÿØÿØ ÿ®ÿßÿ¥ŸÜÿØ!\nŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")
        bot.register_next_step_handler(msg, lambda m: edit_service_step(m, service_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")
        call = telebot.types.CallbackQuery(id=0, from_user=message.from_user, message=message, data="admin_services")
        handle_admin_callback(call)

# ==================== Other Admin Commands ====================
@bot.message_handler(commands=['activate'])
def activate_service(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå ŸÅÿ±ŸÖÿ™: /activate ORDER_ID")
            return
        
        order_id = parts[1]
        order = db.get_order(order_id)
        
        if not order:
            bot.reply_to(message, "‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ Ÿæ€åÿØÿß ŸÜÿ¥ÿØ!")
            return
        
        if order[4] == 'active':
            bot.reply_to(message, "‚ö†Ô∏è ÿß€åŸÜ ÿ≥ÿ±Ÿà€åÿ≥ ŸÇÿ®ŸÑÿßŸã ŸÅÿπÿßŸÑ ÿ¥ÿØŸá!")
            return
        
        # ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± HiddiFy
        # order[1] is user_id, order[11] is traffic_gb, order[10] is duration_days
        username = f"user_{order[1]}_{order_id}"
        config_url = hiddify.create_user(username, order[11], order[10])
        
        if config_url:
            # ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥ŸÅÿßÿ±ÿ¥
            db.update_order_status(order_id, 'active', config_url)
            
            # ÿßÿ±ÿ≥ÿßŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
            expire_date = datetime.fromisoformat(db.get_order(order_id)[7]) # Get expires_at from updated order
            
            config_text = f"""
üéâ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ŸÅÿπÿßŸÑ ÿ¥ÿØ!

üì± ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
‚è∞ ŸÖÿØÿ™: {order[10]} ÿ±Ÿàÿ≤
üìä ÿ≠ÿ¨ŸÖ: {order[11]} ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

üîó ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø:

{config_url}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üì± ŸÜÿ≠ŸàŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá:

1Ô∏è‚É£ ŸÑ€åŸÜ⁄© ÿ®ÿßŸÑÿß ÿ±ÿß ⁄©Ÿæ€å ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ €å⁄©€å ÿßÿ≤ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ:
   ‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: v2rayNG
   ‚Ä¢ ÿ¢€åŸÅŸàŸÜ: Fair VPN
   ‚Ä¢ Ÿà€åŸÜÿØŸàÿ≤: v2rayN

3Ô∏è‚É£ ŸÑ€åŸÜ⁄© ÿ±ÿß ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ import ⁄©ŸÜ€åÿØ
4Ô∏è‚É£ ÿ±Ÿà€å Connect ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ

‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ™ÿß {expire_date.strftime('%Y/%m/%d')} ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™

üî∞ ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßŸÖŸÑ: /help
üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: {SUPPORT_USERNAME}

üåü ÿßÿ≤ ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ŸÖÿ™ÿ¥⁄©ÿ±€åŸÖ!
"""
            
            try:
                bot.send_message(order[1], config_text, parse_mode='Markdown')
                bot.reply_to(message, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± {order[1]} ŸÅÿπÿßŸÑ ÿ¥ÿØ!")
            except Exception as e:
                bot.reply_to(message, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ŸÅÿπÿßŸÑ ÿ¥ÿØ ÿßŸÖÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ± {order[1]} ÿÆÿ∑ÿß ÿ±ÿÆ ÿØÿßÿØ: {e} (⁄©ÿßÿ±ÿ®ÿ± ÿ¥ÿß€åÿØ ÿ®ŸÑÿß⁄© ⁄©ÿ±ÿØŸá ÿßÿ≥ÿ™)")
        else:
            bot.reply_to(message, "‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± ŸæŸÜŸÑ HiddiFy! ŸÑÿ∑ŸÅÿßŸã API Key Ÿà URL ŸæŸÜŸÑ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ.")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")

@bot.message_handler(commands=['stats'])
def stats_command(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    stats = db.get_stats()
    hiddify_status = "‚úÖ ŸÖÿ™ÿµŸÑ" if hiddify.test_connection() else "‚ùå ŸÇÿ∑ÿπ"
    
    stats_text = f"""
üìä ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ÿ±ÿ®ÿßÿ™

üë• ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']:,}
üì¶ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_orders']}
üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_income']:,} ÿ™ŸàŸÖÿßŸÜ
üíé ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {stats['total_income']:,} ÿ™ŸàŸÖÿßŸÜ

üîß Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåŸáÿß:
üåê HiddiFy Panel: {hiddify_status}
üí≥ ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™: {"‚úÖ ŸÅÿπÿßŸÑ" if payment.zarinpal_merchant else "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"}
üíæ ÿØ€åÿ™ÿßÿ®€åÿ≥: ‚úÖ ŸÅÿπÿßŸÑ

üìÖ {datetime.now().strftime('%Y/%m/%d - %H:%M:%S')}
"""
    
    bot.send_message(message.chat.id, stats_text)

@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        # ŸÅÿ±ŸÖÿ™: /broadcast Ÿæ€åÿßŸÖ ÿ¥ŸÖÿß
        text = message.text[11:].strip()  # ÿ≠ÿ∞ŸÅ /broadcast
        if not text:
            bot.reply_to(message, "‚ùå Ÿæ€åÿßŸÖ ÿÆÿßŸÑ€å ÿßÿ≥ÿ™!\n‚úÖ ŸÅÿ±ŸÖÿ™: /broadcast Ÿæ€åÿßŸÖ ÿ¥ŸÖÿß")
            return
        
        # ÿØÿ±€åÿßŸÅÿ™ ŸÑ€åÿ≥ÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE is_active = 1')
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        failed_count = 0
        
        bot.reply_to(message, f"üì° ÿ¥ÿ±Ÿàÿπ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá {len(users)} ⁄©ÿßÿ±ÿ®ÿ±...")
        
        for user in users:
            try:
                bot.send_message(user[0], text)
                sent_count += 1
            except:
                failed_count += 1
        
        result_text = f"""
‚úÖ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ!

üì§ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØŸá: {sent_count}
‚ùå ŸÜÿßŸÖŸàŸÅŸÇ: {failed_count}
üë• ⁄©ŸÑ: {len(users)}
"""
        bot.send_message(message.chat.id, result_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ: {str(e)}")

@bot.message_handler(commands=['orders'])
def show_recent_orders(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.payment_id, o.amount, o.status, o.created_at, s.name, o.user_id
            FROM orders o
            JOIN services s ON o.service_id = s.id  
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            bot.reply_to(message, "üì≠ Ÿá€å⁄Ü ÿ≥ŸÅÿßÿ±ÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
            return
        
        orders_text = "üìã ÿ¢ÿÆÿ±€åŸÜ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™:\n\n"
        
        for order in orders:
            status_emoji = "‚úÖ" if order[2] == "active" else "‚è≥" if order[2] == "pending" else "‚ùå"
            date = datetime.fromisoformat(order[3]).strftime('%m/%d %H:%M')
            
            orders_text += f"""
{status_emoji} #{order[0]}
üí∞ {order[1]:,} ÿ™ŸàŸÖÿßŸÜ - {order[4]}
üë§ ⁄©ÿßÿ±ÿ®ÿ±: {order[5]} | üìÖ {date}
{'‚îÄ' * 35}
"""
        
        bot.send_message(message.chat.id, orders_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")

if __name__ == "__main__":
    print("üöÄ ÿØÿ± ÿ≠ÿßŸÑ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™...")
    # Attempt to get bot info, but handle potential errors (e.g., invalid token)
    try:
        bot_info = bot.get_me()
        print(f"ü§ñ ŸÜÿßŸÖ ÿ±ÿ®ÿßÿ™: {bot_info.first_name}")
        print(f"üÜî €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{bot_info.username}")
        print("‚úÖ ÿ±ÿ®ÿßÿ™ ÿ¢ŸÖÿßÿØŸá ÿßÿ≥ÿ™!")
    except Exception as e:
        print(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿØÿ±€åÿßŸÅÿ™ ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ±ÿ®ÿßÿ™. ÿ™Ÿà⁄©ŸÜ ÿ±ÿ®ÿßÿ™ ÿµÿ≠€åÿ≠ ŸÜ€åÿ≥ÿ™ €åÿß ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿ±ŸÇÿ±ÿßÿ± ŸÜÿ¥ÿØ: {e}")
        print("ŸÑÿ∑ŸÅÿßŸã ŸÅÿß€åŸÑ config.py ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å Ÿà ÿßÿµŸÑÿßÿ≠ ⁄©ŸÜ€åÿØ.")
        exit(1) # Exit if bot token is invalid

    try:
        bot.infinity_polling(none_stop=True)
    except Exception as e:
        print(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ¨ÿ±ÿß€å ÿ±ÿ®ÿßÿ™: {e}")
EOF
echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ bot.py ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ manage.sh
cat > manage.sh << 'EOF'
#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

show_menu() {
    echo -e "${BLUE}ü§ñ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN${NC}"
    echo "=========================="
    echo "1. ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™"
    echo "2. ÿ™ŸàŸÇŸÅ ÿ±ÿ®ÿßÿ™" 
    echo "3. Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™"
    echo "4. ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß"
    echo "5. Ÿà€åÿ±ÿß€åÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ (config.py)"
    echo "6. ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™"
    echo "7. ÿ™ŸÜÿ∏€åŸÖ ŸÅÿß€åÿ±ŸàÿßŸÑ (UFW)"
    echo "8. ÿÆÿ±Ÿàÿ¨"
    echo -n "ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ [1-8]: "
}

start_bot() {
    echo -e "${YELLOW}üöÄ ÿØÿ± ÿ≠ÿßŸÑ ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl enable vpn-bot
    systemctl start vpn-bot
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™${NC}"
    fi
}

stop_bot() {
    echo -e "${YELLOW}üõë ÿØÿ± ÿ≠ÿßŸÑ ÿ™ŸàŸÇŸÅ ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl stop vpn-bot
    echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØ${NC}"
}

status_bot() {
    echo -e "${BLUE}üìä Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™:${NC}"
    systemctl status vpn-bot --no-pager -l
}

show_logs() {
    echo -e "${BLUE}üìã ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ±ÿ®ÿßÿ™:${NC}"
    echo "ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨ Ctrl+C ÿ®ÿ≤ŸÜ€åÿØ"
    journalctl -u vpn-bot -f
}

edit_config() {
    echo -e "${YELLOW}‚öôÔ∏è Ÿà€åÿ±ÿß€åÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™...${NC}"
    nano config.py
    echo -e "${GREEN}‚úÖ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ${NC}"
    echo -e "${YELLOW}üîÑ ÿ®ÿ±ÿß€å ÿßÿπŸÖÿßŸÑ ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ±ÿß restart ⁄©ŸÜ€åÿØ${NC}"
}

restart_bot() {
    echo -e "${YELLOW}üîÑ ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl restart vpn-bot
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™${NC}"
    fi
}

setup_firewall() {
    echo -e "${YELLOW}üî• ÿ™ŸÜÿ∏€åŸÖ ŸÅÿß€åÿ±ŸàÿßŸÑ...${NC}"
    apt install ufw -y
    ufw --force enable
    ufw allow ssh
    ufw allow 443
    ufw allow 80
    echo -e "${GREEN}‚úÖ ŸÅÿß€åÿ±ŸàÿßŸÑ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ÿ¥ÿØ${NC}"
}

while true; do
    show_menu
    read choice
    case $choice in
        1) start_bot ;;
        2) stop_bot ;;
        3) status_bot ;;
        4) show_logs ;;
        5) edit_config ;;
        6) restart_bot ;;
        7) setup_firewall ;;
        8) echo -e "${GREEN}üëã ÿÆÿØÿßÿ≠ÿßŸÅÿ∏!${NC}"; exit 0 ;;
        *) echo -e "${RED}‚ùå ÿßŸÜÿ™ÿÆÿßÿ® ŸÜÿßŸÖÿπÿ™ÿ®ÿ±${NC}" ;;
    esac
    echo
    read -p "ÿ®ÿ±ÿß€å ÿßÿØÿßŸÖŸá Enter ÿ®ÿ≤ŸÜ€åÿØ..."
done
EOF
echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ manage.sh ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ backup.sh
mkdir -p /opt/backups
cat > backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M)
BACKUP_DIR="/opt/backups"
PROJECT_DIR="/opt/vpn-bot"

echo "üóÑÔ∏è ÿß€åÿ¨ÿßÿØ ÿ®⁄©‚Äåÿ¢Ÿæ..."
tar -czf "$BACKUP_DIR/vpn-bot-backup-$DATE.tar.gz" -C "$PROJECT_DIR" bot.py config.py vpn_bot.db

# ÿ≠ÿ∞ŸÅ ÿ®⁄©‚Äåÿ¢Ÿæ‚ÄåŸáÿß€å ŸÇÿØ€åŸÖ€å (ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ 7 ÿ±Ÿàÿ≤)
find "$BACKUP_DIR" -name "vpn-bot-backup-*.tar.gz" -mtime +7 -delete

echo "‚úÖ ÿ®⁄©‚Äåÿ¢Ÿæ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ: vpn-bot-backup-$DATE.tar.gz"
EOF
echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ backup.sh ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ README.md (ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ README.md ÿ®ÿß€åÿØ ÿß€åŸÜÿ¨ÿß ŸÇÿ±ÿßÿ± ⁄Ø€åÿ±ÿØ)
# ÿ™Ÿàÿ¨Ÿá: ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ README.md ÿØÿ± ÿßÿØÿßŸÖŸá ÿ™Ÿàÿ∂€åÿ≠ ÿØÿßÿØŸá ÿ¥ÿØŸá ÿßÿ≥ÿ™ÿå ÿßŸÖÿß ÿ®ÿ±ÿß€å ÿÆŸàÿØ⁄©ÿßÿ±ÿ≥ÿßÿ≤€åÿå ÿ®ÿß€åÿØ ÿ¢ŸÜ ÿ±ÿß ÿß€åŸÜÿ¨ÿß ÿ¨ÿß€å⁄Øÿ∞ÿßÿ±€å ⁄©ŸÜ€åÿØ.
cat > README.md << 'EOF'
# ü§ñ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN

ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿæ€åÿ¥ÿ±ŸÅÿ™Ÿá ÿ®ÿ±ÿß€å ŸÅÿ±Ÿàÿ¥ ÿÆŸàÿØ⁄©ÿßÿ± ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å VPN ÿ®ÿß ŸæŸÜŸÑ HiddiFy

## ‚ú® Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß

- üõí **ŸÅÿ±Ÿàÿ¥ ÿÆŸàÿØ⁄©ÿßÿ±** ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å VPN
- üí≥ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ **ÿØÿ±⁄ØÿßŸá‚ÄåŸáÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿß€åÿ±ÿßŸÜ€å** (ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ Ÿà ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™)
- üîó ÿßÿ™ÿµÿßŸÑ ŸÖÿ≥ÿ™ŸÇ€åŸÖ ÿ®Ÿá **ŸæŸÜŸÑ HiddiFy** ÿ®ÿ±ÿß€å ÿß€åÿ¨ÿßÿØ ÿÆŸàÿØ⁄©ÿßÿ± ⁄©ÿßŸÜŸÅ€å⁄Ø
- üë®‚Äçüíº **ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ ⁄©ÿßŸÖŸÑ** ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿßÿØŸÖ€åŸÜ
- üìä **⁄Øÿ≤ÿßÿ±ÿ¥‚Äå⁄Ø€åÿ±€å Ÿà ÿ¢ŸÖÿßÿ±** ŸÑÿ≠ÿ∏Ÿá‚Äåÿß€å
- üí¨ **Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ**
- üîÑ **ÿ®⁄©‚Äåÿ¢Ÿæ ÿÆŸàÿØ⁄©ÿßÿ±** ÿ±Ÿàÿ≤ÿßŸÜŸá ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥ Ÿà ŸÅÿß€åŸÑ‚ÄåŸáÿß
- ‚ûï‚ûñ **ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß** (ÿßŸÅÿ≤ŸàÿØŸÜÿå Ÿà€åÿ±ÿß€åÿ¥ÿå ÿ≠ÿ∞ŸÅ) ÿßÿ≤ ÿØÿßÿÆŸÑ ÿ±ÿ®ÿßÿ™

## üöÄ ŸÜÿµÿ® ÿ≥ÿ±€åÿπ Ÿà ÿÆŸàÿØ⁄©ÿßÿ±

ÿ®ÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ±ÿå ÿ±ÿ®ÿßÿ™ ÿ®Ÿá ÿµŸàÿ±ÿ™ ⁄©ÿßŸÖŸÑ ÿ±Ÿà€å ÿ≥ÿ±Ÿàÿ± ÿ¥ŸÖÿß ŸÜÿµÿ® Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ŸÖ€å‚Äåÿ¥ŸàÿØ. ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ÿ™ŸÖÿßŸÖ Ÿæ€åÿ¥‚ÄåŸÜ€åÿßÿ≤Ÿáÿß ÿ±ÿß ŸÜÿµÿ® ⁄©ÿ±ÿØŸáÿå ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá ÿ±ÿß ÿß€åÿ¨ÿßÿØ ⁄©ÿ±ÿØŸáÿå ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿßŸàŸÑ€åŸá ÿ±ÿß ÿßÿ≤ ÿ¥ŸÖÿß ŸÖ€å‚Äå⁄Ø€åÿ±ÿØ Ÿà ÿ±ÿ®ÿßÿ™ ÿ±ÿß ÿ®Ÿá ÿπŸÜŸàÿßŸÜ €å⁄© ÿ≥ÿ±Ÿà€åÿ≥ ÿ≥€åÿ≥ÿ™ŸÖ€å (Systemd) ÿ™ŸÜÿ∏€åŸÖ ŸÖ€å‚Äå⁄©ŸÜÿØ.

```bash
sudo curl -sSL [https://raw.githubusercontent.com/yourusername/vpn-sales-bot/main/install.sh](https://raw.githubusercontent.com/yourusername/vpn-sales-bot/main/install.sh) | sudo bash

ŸÜ⁄©ÿ™Ÿá ŸÖŸáŸÖ: ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá https://raw.githubusercontent.com/yourusername/vpn-sales-bot/main/install.sh ÿ±ÿß ÿ®ÿß ŸÑ€åŸÜ⁄© install.sh ÿØÿ± ÿ±€åŸæÿßÿ≤€åÿ™Ÿàÿ±€å ÿÆŸàÿØÿ™ÿßŸÜ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ. Ÿæÿ≥ ÿßÿ≤ ÿßÿ¨ÿ±ÿß€å ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ±ÿå ÿ≥ŸàÿßŸÑÿßÿ™€å ÿßÿ≤ ÿ¥ŸÖÿß Ÿæÿ±ÿ≥€åÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ ⁄©Ÿá ÿ®ÿß€åÿØ Ÿæÿßÿ≥ÿÆ ÿØŸá€åÿØ.
‚öôÔ∏è Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å
Ÿæÿ≥ ÿßÿ≤ ŸÜÿµÿ®ÿå ÿ™ŸÖÿßŸÖ ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ÿØÿ± ŸÅÿß€åŸÑ config.py ÿ∞ÿÆ€åÿ±Ÿá ŸÖ€å‚Äåÿ¥ŸàÿØ. ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿß€åŸÜ ŸÅÿß€åŸÑ ÿ±ÿß ÿØÿ± Ÿáÿ± ÿ≤ŸÖÿßŸÜ ÿ®ÿß ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿßÿ≥⁄©ÿ±€åŸæÿ™ manage.sh Ÿà€åÿ±ÿß€åÿ¥ ⁄©ŸÜ€åÿØ.
ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ∂ÿ±Ÿàÿ±€å ⁄©Ÿá ŸáŸÜ⁄ØÿßŸÖ ŸÜÿµÿ® ÿßÿ≤ ÿ¥ŸÖÿß Ÿæÿ±ÿ≥€åÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ:
 * ÿ™Ÿà⁄©ŸÜ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ: ÿßÿ≤ @BotFather ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ.
 * ÿ¢€åÿØ€å ÿπÿØÿØ€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿßÿØŸÖ€åŸÜ: ÿ®ÿ±ÿß€å ÿØÿ±€åÿßŸÅÿ™ÿå Ÿæ€åÿßŸÖ⁄© /myid ÿ±ÿß ÿ®Ÿá @userinfobot ÿ®ŸÅÿ±ÿ≥ÿ™€åÿØ.
 * ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß: ŸÖÿ´ÿßŸÑ: https://your-panel.com (ÿ®ÿØŸàŸÜ /api €åÿß /admin).
 * API Key ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß: ÿßÿ≤ ÿ®ÿÆÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™/API ŸæŸÜŸÑ Hiddify ÿÆŸàÿØ ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ.
 * ÿ¥ŸÜÿßÿ≥Ÿá Ÿæÿ∞€åÿ±ŸÜÿØŸá ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ÿ¥ŸÖÿß: (ÿßÿÆÿ™€åÿßÿ±€å).
 * ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å ÿ®ÿ±ÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿØÿ≥ÿ™€å: (ÿßÿÆÿ™€åÿßÿ±€å).
 * ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å: (ÿßÿÆÿ™€åÿßÿ±€å).
 * €åŸàÿ≤ÿ±ŸÜ€åŸÖ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ¥ŸÖÿß: ŸÖÿ´ÿßŸÑ: @my_support.
 * ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ¥ŸÖÿß: ŸÖÿ´ÿßŸÑ: 09123456789.
 * ÿ¢ÿØÿ±ÿ≥ Ÿàÿ®‚ÄåŸáŸà⁄© ÿ±ÿ®ÿßÿ™: (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿ®ÿ±ÿß€å ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ). ÿß⁄Øÿ± ÿßÿ≤ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜ€åÿØ Ÿà ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿÆŸàÿØ⁄©ÿßÿ± ÿ™ÿß€å€åÿØ ÿ¥ŸàŸÜÿØÿå ÿ®ÿß€åÿØ ÿ¢ÿØÿ±ÿ≥ IP/ÿØÿßŸÖŸÜŸá ÿ≥ÿ±Ÿàÿ± ÿÆŸàÿØ ÿ±ÿß ÿ®Ÿá ÿπŸÑÿßŸàŸá /verify ÿß€åŸÜÿ¨ÿß ŸÇÿ±ÿßÿ± ÿØŸá€åÿØ. ŸÖÿ´ÿßŸÑ: http://your_server_ip_or_domain:PORT. (ÿß€åŸÜ ÿ®ÿÆÿ¥ ŸÜ€åÿßÿ≤ ÿ®Ÿá ÿØÿßŸÜÿ¥ ÿ®€åÿ¥ÿ™ÿ± Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å Ÿàÿ®‚Äåÿ≥ÿ±Ÿàÿ± ÿØÿßÿ±ÿØ. ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿÆÿßŸÑ€å ÿ®⁄Øÿ∞ÿßÿ±€åÿØ Ÿà ÿ™ÿß€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß ÿ±ÿß ÿØÿ≥ÿ™€å ÿßŸÜÿ¨ÿßŸÖ ÿØŸá€åÿØ.)
üõ†Ô∏è ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™
Ÿæÿ≥ ÿßÿ≤ ŸÜÿµÿ®ÿå ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿßÿ≤ ÿßÿ≥⁄©ÿ±€åŸæÿ™ manage.sh ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ ÿ¢ÿ≥ÿßŸÜ ÿ±ÿ®ÿßÿ™ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ. ÿßÿ®ÿ™ÿØÿß ÿ®Ÿá ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å Ÿæÿ±Ÿà⁄òŸá ÿ®ÿ±Ÿà€åÿØ:
cd /opt/vpn-bot

ÿ≥Ÿæÿ≥ ÿßÿ≥⁄©ÿ±€åŸæÿ™ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿß ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ:
./manage.sh

ÿß€åŸÜ ÿßÿ≥⁄©ÿ±€åŸæÿ™ €å⁄© ŸÖŸÜŸà€å ÿ™ÿπÿßŸÖŸÑ€å ÿ®ÿ±ÿß€å ÿßŸÜÿ¨ÿßŸÖ ÿπŸÖŸÑ€åÿßÿ™ ÿ≤€åÿ± ŸÅÿ±ÿßŸáŸÖ ŸÖ€å‚Äå⁄©ŸÜÿØ:
 * ÿ¥ÿ±Ÿàÿπ/ÿ™ŸàŸÇŸÅ/Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™
 * ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß
 * Ÿà€åÿ±ÿß€åÿ¥ ŸÅÿß€åŸÑ config.py
 * ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™
 * ÿ™ŸÜÿ∏€åŸÖ ŸÅÿß€åÿ±ŸàÿßŸÑ (UFW)
üì± ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ÿπÿßÿØ€å
 * /start - ÿ¥ÿ±Ÿàÿπ ÿ™ÿπÿßŸÖŸÑ ÿ®ÿß ÿ±ÿ®ÿßÿ™ Ÿà ŸÜŸÖÿß€åÿ¥ ŸÖŸÜŸà€å ÿßÿµŸÑ€å.
 * ÿØ⁄©ŸÖŸá‚ÄåŸáÿß€å ÿß€åŸÜŸÑÿß€åŸÜ ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ÿå ŸÖÿ¥ÿßŸáÿØŸá ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜÿå Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å Ÿà ÿ±ÿßŸáŸÜŸÖÿß.
ÿ®ÿ±ÿß€å ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
 * /admin - ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™.
   * ÿßÿ≤ ÿß€åŸÜ ŸæŸÜŸÑ ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ®Ÿá ÿ¢ŸÖÿßÿ± ÿ±ÿ®ÿßÿ™ÿå ŸÑ€åÿ≥ÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ Ÿà ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿØÿ≥ÿ™ÿ±ÿ≥€å Ÿæ€åÿØÿß ⁄©ŸÜ€åÿØ.
   * ŸáŸÖ⁄ÜŸÜ€åŸÜ ÿ®ÿÆÿ¥ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß ÿßŸÖ⁄©ÿßŸÜ ÿßŸÅÿ≤ŸàÿØŸÜÿå Ÿà€åÿ±ÿß€åÿ¥ Ÿà ÿ≠ÿ∞ŸÅ ŸæŸÑŸÜ‚ÄåŸáÿß€å VPN ÿ±ÿß ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿ™ÿπÿßŸÖŸÑ€å ŸÅÿ±ÿßŸáŸÖ ŸÖ€å‚Äå⁄©ŸÜÿØ.
 * /activate ORDER_ID - ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å €å⁄© ÿ≥ŸÅÿßÿ±ÿ¥ ÿÆÿßÿµ (ÿ®ÿß ÿ¨ÿß€å⁄Øÿ≤€åŸÜ€å ORDER_ID ÿ®ÿß ÿ¥ŸÜÿßÿ≥Ÿá ÿ≥ŸÅÿßÿ±ÿ¥).
   (ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿ±ÿß€å ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å ÿØÿ≥ÿ™€å Ÿæÿ≥ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äåÿ¥ŸàÿØ)
 * /stats - ŸÖÿ¥ÿßŸáÿØŸá ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å ÿ±ÿ®ÿßÿ™ (ÿ™ÿπÿØÿßÿØ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜÿå ÿØÿ±ÿ¢ŸÖÿØ Ÿà...).
 * /broadcast Ÿæ€åÿßŸÖ_ÿ¥ŸÖÿß - ÿßÿ±ÿ≥ÿßŸÑ €å⁄© Ÿæ€åÿßŸÖ ŸáŸÖ⁄ØÿßŸÜ€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ŸÅÿπÿßŸÑ ÿ±ÿ®ÿßÿ™.
 * /orders - ŸÖÿ¥ÿßŸáÿØŸá €±€∞ ÿ≥ŸÅÿßÿ±ÿ¥ ÿßÿÆ€åÿ± ÿØÿ± ÿ±ÿ®ÿßÿ™.
üîß ÿπ€åÿ®‚Äå€åÿßÿ®€å
ŸÖÿ¥⁄©ŸÑÿßÿ™ ÿ±ÿß€åÿ¨
ÿ±ÿ®ÿßÿ™ Ÿæÿßÿ≥ÿÆ ŸÜŸÖ€å‚ÄåÿØŸáÿØ €åÿß ⁄©ÿßÿ± ŸÜŸÖ€å‚Äå⁄©ŸÜÿØ:
 * Ÿàÿ∂ÿπ€åÿ™ ÿ≥ÿ±Ÿà€åÿ≥ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ:
   sudo systemctl status vpn-bot

   ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± ÿ≠ÿßŸÑ ÿßÿ¨ÿ±ÿß (active (running)) ÿ®ÿßÿ¥ÿØ.
 * ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ±ÿ®ÿßÿ™ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ:
   sudo journalctl -u vpn-bot -f

   ÿ®Ÿá ÿØŸÜÿ®ÿßŸÑ Ÿæ€åÿßŸÖ‚ÄåŸáÿß€å ÿÆÿ∑ÿß €åÿß Ÿáÿ¥ÿØÿßÿ± ÿ®ÿßÿ¥€åÿØ.
ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ŸæŸÜŸÑ Hiddify:
 * ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ (HIDDIFY_API_URL) Ÿà API Key (HIDDIFY_API_KEY) ÿ±ÿß ÿØÿ± config.py ÿ®ÿß ÿØŸÇÿ™ ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ. ÿßÿ≤ ÿßÿ≥⁄©ÿ±€åŸæÿ™ manage.sh ⁄Øÿ≤€åŸÜŸá 5 ÿ±ÿß ÿ®ÿ±ÿß€å Ÿà€åÿ±ÿß€åÿ¥ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.
 * ŸÖÿ∑ŸÖÿ¶ŸÜ ÿ¥Ÿà€åÿØ ⁄©Ÿá ÿ≥ÿ±Ÿàÿ± ÿ¥ŸÖÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜÿØ ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ Hiddify ŸÖÿ™ÿµŸÑ ÿ¥ŸàÿØ (ŸÖÿ´ŸÑÿßŸã ÿ®ÿß ping your-hiddify-panel.com €åÿß curl -I https://your-hiddify-panel.com).
ŸÖÿ¥⁄©ŸÑ ÿØÿ± Ÿæÿß€å⁄ØÿßŸá ÿØÿßÿØŸá SQLite:
ÿØÿ± ŸÖŸàÿßÿ±ÿØ ŸÜÿßÿØÿ±ÿå ŸÖŸÖ⁄©ŸÜ ÿßÿ≥ÿ™ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ÿ¨ÿßŸÜÿ®€å ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿØ⁄Üÿßÿ± ŸÖÿ¥⁄©ŸÑ ÿ¥ŸàŸÜÿØ. ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ¢ŸÜ‚ÄåŸáÿß ÿ±ÿß ÿ≠ÿ∞ŸÅ ⁄©ÿ±ÿØŸá Ÿà ÿ±ÿ®ÿßÿ™ ÿ±ÿß restart ⁄©ŸÜ€åÿØ (ÿØ€åÿ™ÿßÿ®€åÿ≥ ÿßÿµŸÑ€å vpn_bot.db ŸÜÿ®ÿß€åÿØ ÿ≠ÿ∞ŸÅ ÿ¥ŸàÿØ):
rm /opt/vpn-bot/vpn_bot.db-wal
rm /opt/vpn-bot/vpn_bot.db-shm
sudo systemctl restart vpn-bot

ü§ù ŸÖÿ¥ÿßÿ±⁄©ÿ™
ÿßÿ≤ Ÿáÿ±⁄ØŸàŸÜŸá ŸÖÿ¥ÿßÿ±⁄©ÿ™ ÿØÿ± ÿ®Ÿáÿ®ŸàÿØ ÿß€åŸÜ Ÿæÿ±Ÿà⁄òŸá ÿßÿ≥ÿ™ŸÇÿ®ÿßŸÑ ŸÖ€å‚Äåÿ¥ŸàÿØ! ÿß⁄Øÿ± ÿß€åÿØŸá‚Äåÿß€å ÿ®ÿ±ÿß€å Ÿà€å⁄ò⁄Ø€å ÿ¨ÿØ€åÿØ ÿØÿßÿ±€åÿØÿå ÿ®ÿß⁄Ø Ÿæ€åÿØÿß ⁄©ÿ±ÿØ€åÿØ €åÿß ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ⁄©ÿØ€å ÿ±ÿß ÿ®Ÿáÿ®ŸàÿØ ÿ®ÿÆÿ¥€åÿØÿå ŸÑÿ∑ŸÅÿßŸã ŸÖÿ±ÿßÿ≠ŸÑ ÿ≤€åÿ± ÿ±ÿß ÿØŸÜÿ®ÿßŸÑ ⁄©ŸÜ€åÿØ:
 * Ÿæÿ±Ÿà⁄òŸá ÿ±ÿß Fork ⁄©ŸÜ€åÿØ.
 * €å⁄© Branch ÿ¨ÿØ€åÿØ ÿ®ÿ±ÿß€å ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿÆŸàÿØ ÿß€åÿ¨ÿßÿØ ⁄©ŸÜ€åÿØ (git checkout -b feature/your-feature-name).
 * ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿÆŸàÿØ ÿ±ÿß Commit ⁄©ŸÜ€åÿØ (git commit -m 'Add new feature').
 * ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ±ÿß ÿ®Ÿá ÿ±€åŸæÿßÿ≤€åÿ™Ÿàÿ±€å ÿÆŸàÿØ Push ⁄©ŸÜ€åÿØ (git push origin feature/your-feature-name).
 * €å⁄© Pull Request ÿ®Ÿá ÿß€åŸÜ ÿ±€åŸæÿßÿ≤€åÿ™Ÿàÿ±€å ÿß€åÿ¨ÿßÿØ ⁄©ŸÜ€åÿØ.
üìÑ ŸÑÿß€åÿ≥ŸÜÿ≥
ÿß€åŸÜ Ÿæÿ±Ÿà⁄òŸá ÿ™ÿ≠ÿ™ ŸÑÿß€åÿ≥ŸÜÿ≥ MIT ŸÖŸÜÿ™ÿ¥ÿ± ÿ¥ÿØŸá ÿßÿ≥ÿ™. ÿ®ÿ±ÿß€å ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ®€åÿ¥ÿ™ÿ±ÿå ÿ®Ÿá ŸÅÿß€åŸÑ LICENSE (ÿß⁄Øÿ± Ÿàÿ¨ŸàÿØ ÿØÿßÿ±ÿØ) ŸÖÿ±ÿßÿ¨ÿπŸá ⁄©ŸÜ€åÿØ.
üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
ÿß⁄Øÿ± ÿ≥ÿ§ÿßŸÑ€å ÿØÿßÿ±€åÿØ €åÿß ÿ®Ÿá ⁄©ŸÖ⁄© ŸÜ€åÿßÿ≤ ÿØÿßÿ±€åÿØÿå ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿßÿ≤ ÿ∑ÿ±€åŸÇ ÿ±ÿßŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ®ÿß ŸÖÿß ÿØÿ± ÿ™ŸÖÿßÿ≥ ÿ®ÿßÿ¥€åÿØ:
 * ÿ™ŸÑ⁄Øÿ±ÿßŸÖ: [@YourUsername] (ÿ®ÿß €åŸàÿ≤ÿ±ŸÜ€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿÆŸàÿØ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ)
 * ÿß€åŸÖ€åŸÑ: [your@email.com] (ÿ®ÿß ÿß€åŸÖ€åŸÑ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿÆŸàÿØ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ)
 * Issues: GitHub Issues (ÿ®ÿß ÿ¢ÿØÿ±ÿ≥ ÿ±€åŸæÿßÿ≤€åÿ™Ÿàÿ±€å ÿÆŸàÿØ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ)
EOF
echo -e "{GREEN}‚úÖ ŸÅÿß€åŸÑ README.md ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ{NC}"
echo -e "{YELLOW}üîß ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å Python...{NC}"
python3 -m venv venv
source venv/bin/activate
check_success "ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å"
echo -e "{YELLOW}üìö ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤...{NC}"
pip install --upgrade pip
pip install -r requirements.txt
check_success "ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß"
ÿßÿ¨ÿßÿ≤Ÿá ÿßÿ¨ÿ±ÿß€å€å ÿ¥ÿØŸÜ ÿßÿ≥⁄©ÿ±€åŸæÿ™‚ÄåŸáÿß
chmod +x manage.sh backup.sh
check_success "ÿ™ŸÜÿ∏€åŸÖ ŸÖÿ¨Ÿàÿ≤Ÿáÿß€å ÿßÿ¨ÿ±ÿß€å€å"
ÿß€åÿ¨ÿßÿØ systemd service
echo -e "{YELLOW}‚öôÔ∏è ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥ systemd...{NC}"
cat > /etc/systemd/system/vpn-bot.service << EOF
[Unit]
Description=VPN Sales Bot
After=network.target
[Service]
Type=simple
User=root
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/venv/bin
ExecStart=$PROJECT_DIR/venv/bin/python bot.py
Restart=always
RestartSec=5
[Install]
WantedBy=multi-user.target
EOF
systemctl daemon-reload
check_success "ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥"
ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ cron job ÿ®ÿ±ÿß€å ÿ®⁄©‚Äåÿ¢Ÿæ ÿ±Ÿàÿ≤ÿßŸÜŸá
(crontab -l 2>/dev/null; echo "0 2 * * * $PROJECT_DIR/backup.sh >> /var/log/vpn-bot-backup.log 2>&1") | crontab -
check_success "ÿ™ŸÜÿ∏€åŸÖ Cron Job ÿ®ÿ±ÿß€å ÿ®⁄©‚Äåÿ¢Ÿæ"
echo -e "{GREEN}‚úÖ ŸÜÿµÿ® ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ\!{NC}"
echo ""
echo -e "{BLUE}üìã ŸÖÿ±ÿßÿ≠ŸÑ ÿ®ÿßŸÇ€å‚ÄåŸÖÿßŸÜÿØŸá:{NC}"
echo "1. ÿ±ÿ®ÿßÿ™ ÿ±ÿß ÿ¥ÿ±Ÿàÿπ ⁄©ŸÜ€åÿØ:"
echo "   cd PROJECT\_DIR && ./manage.sh"
echo "   ÿ≥Ÿæÿ≥ ⁄Øÿ≤€åŸÜŸá '1. ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™' ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ."
echo ""
echo "2. ÿØÿ± ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ ÿ±ÿ®ÿßÿ™ (ÿØÿ≥ÿ™Ÿàÿ± /admin)ÿå Ÿàÿßÿ±ÿØ ÿ®ÿÆÿ¥ 'üì¶ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß' ÿ¥Ÿà€åÿØ Ÿà ŸæŸÑŸÜ‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ÿßŸÜ ÿ±ÿß ÿßÿ∂ÿßŸÅŸá/Ÿà€åÿ±ÿß€åÿ¥ ⁄©ŸÜ€åÿØ."
echo ""
echo -e "{YELLOW}üîó ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÖŸáŸÖ:${NC}"
echo "   üìÅ Ÿæÿ±Ÿà⁄òŸá: $PROJECT_DIR"
echo "   ‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™: $PROJECT_DIR/config.py"
echo "   ü§ñ ÿ±ÿ®ÿßÿ™: PROJECT\_DIR/bot.py"
echo "   üõ†Ô∏è ŸÖÿØ€åÿ±€åÿ™: $PROJECT\_DIR/manage.sh"
echo ""
echo -e "${GREEN}üéâ ŸÖŸàŸÅŸÇ ÿ®ÿßÿ¥€åÿØ\!{NC}"