#!/bin/bash

# ÿ±ŸÜ⁄Ø‚ÄåŸáÿß ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨€å
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ ŸÜÿµÿ® Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN${NC}"
echo "==============================================="

# ÿ™ÿßÿ®ÿπ ⁄Ü⁄© ⁄©ÿ±ÿØŸÜ ŸÖŸàŸÅŸÇ€åÿ™ ÿØÿ≥ÿ™Ÿàÿ±
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1 ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± $1${NC}"
        exit 1
    fi
}

# ÿ®ÿ±ÿ±ÿ≥€å ÿØÿ≥ÿ™ÿ±ÿ≥€å root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å root ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ (sudo)${NC}"
    exit 1
fi

echo -e "${YELLOW}üì¶ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ...${NC}"
apt update && apt upgrade -y
check_success "ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ"

echo -e "${YELLOW}üêç ŸÜÿµÿ® Python Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸÖÿ±ÿ®Ÿàÿ∑Ÿá...${NC}"
apt install python3 python3-pip python3-venv git screen nano curl -y
check_success "ŸÜÿµÿ® Python"

# ÿ®ÿ±ÿ±ÿ≥€å ŸÜÿ≥ÿÆŸá Python
PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
echo -e "${GREEN}‚úÖ Python ŸÜÿ≥ÿÆŸá $PYTHON_VERSION ŸÜÿµÿ® ÿ¥ÿØ${NC}"

echo -e "${YELLOW}üìÅ ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å Ÿæÿ±Ÿà⁄òŸá...${NC}"
PROJECT_DIR="/opt/vpn-bot"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR
check_success "ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å"

echo -e "${YELLOW}üîß ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å Python...${NC}"
python3 -m venv venv
source venv/bin/activate
check_success "ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å"

echo -e "${YELLOW}üìö ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤...${NC}"
pip install --upgrade pip
pip install -r requirements.txt
check_success "ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß"

echo -e "${YELLOW}üìù ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá...${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ config.py
cat > config.py << 'EOF'
"""
ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN
ŸÑÿ∑ŸÅÿßŸã ÿ™ŸÖÿßŸÖ ŸÖŸÇÿßÿØ€åÿ± ÿ±ÿß ÿ®ÿß ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸàÿßŸÇÿπ€å ÿÆŸàÿØ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ
"""

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# ŸÑ€åÿ≥ÿ™ ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
ADMIN_IDS = [123456789] # ÿß€åŸÜÿ¨ÿß ÿ®ÿß€åÿØ ÿ¢€åÿØ€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿÆŸàÿØÿ™ÿßŸÜ ÿ±ÿß ŸÇÿ±ÿßÿ± ÿØŸá€åÿØ

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÜŸÑ HiddiFy  
HIDDIFY_API_URL = "https://your-panel.com" # ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß
HIDDIFY_API_KEY = "your-api-key" # API Key ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß

# ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ
ZARINPAL_MERCHANT_ID = "" # ⁄©ÿØ ŸÖÿ±⁄ÜŸÜÿ™ ÿ≤ÿ±€åŸÜ ŸæÿßŸÑ ÿ¥ŸÖÿß (ÿßÿÆÿ™€åÿßÿ±€å)

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™
CARD_NUMBER = "6037-9977-****-****" # ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å ÿ®ÿ±ÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿØÿ≥ÿ™€å
CARD_HOLDER_NAME = "ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™" # ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å

# Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
SUPPORT_USERNAME = "@your_support" # €åŸàÿ≤ÿ±ŸÜ€åŸÖ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
SUPPORT_PHONE = "09123456789" # ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å

# Ÿàÿ®‚ÄåŸáŸà⁄© (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿ®ÿ±ÿß€å ÿ™ÿ£€å€åÿØ ÿÆŸàÿØ⁄©ÿßÿ± Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)
BOT_WEBHOOK_URL = "" 
EOF

echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ config.py ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ bot.py
# ÿ™Ÿàÿ¨Ÿá: ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ bot.py ÿß€åŸÜÿ¨ÿß ŸÇÿ±ÿßÿ± ŸÖ€å‚Äå⁄Ø€åÿ±ÿØ
cat > bot.py << 'EOF'
import telebot
import sqlite3
import json
import requests
from datetime import datetime, timedelta
import uuid
import os
from config import *

class DatabaseManager:
    def __init__(self):
        self.db_name = 'vpn_bot.db'
        self.init_database()
    
    def init_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ÿ¨ÿØŸàŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                phone TEXT,
                join_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS services (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                duration_days INTEGER,
                traffic_gb INTEGER,
                description TEXT
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_id INTEGER,
                amount INTEGER,
                status TEXT DEFAULT 'pending',
                payment_id TEXT,
                config_url TEXT,
                created_at TEXT,
                expires_at TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
        self.add_default_services()
    
    def add_default_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM services')
        
        if cursor.fetchone()[0] == 0:
            default_services = [
                ("Ÿæ⁄©€åÿ¨ €± ŸÖÿßŸáŸá - €µ€∞ ⁄Ø€å⁄Ø", 50000, 30, 50, "ŸÖŸÜÿßÿ≥ÿ® ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ÿÆÿµ€å ÿ±Ÿàÿ≤ÿßŸÜŸá"),
                ("Ÿæ⁄©€åÿ¨ €≥ ŸÖÿßŸáŸá - €±€µ€∞ ⁄Ø€å⁄Ø", 120000, 90, 150, "Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±ÿ™ÿ±€åŸÜ Ÿæ⁄©€åÿ¨ - €≥€≥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ €∂ ŸÖÿßŸáŸá - €≥€∞€∞ ⁄Ø€å⁄Ø", 200000, 180, 300, "ÿ®Ÿáÿ™ÿ±€åŸÜ ŸÇ€åŸÖÿ™ - €¥€¥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ Ÿà€å⁄òŸá - ŸÜÿßŸÖÿ≠ÿØŸàÿØ", 300000, 365, 1000, "€å⁄© ÿ≥ÿßŸÑ ⁄©ÿßŸÖŸÑ ÿ®ÿß ÿ™ÿ±ÿßŸÅ€å⁄© ŸÅÿ±ÿßŸàÿßŸÜ")
            ]
            
            cursor.executemany('''
                INSERT INTO services (name, price, duration_days, traffic_gb, description)
                VALUES (?, ?, ?, ?, ?)
            ''', default_services)
            conn.commit()
        
        conn.close()
    
    def add_user(self, user_id, username):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, join_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, datetime.now().isoformat()))
        conn.commit()
        conn.close()
    
    def get_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id > 0')
        services = cursor.fetchall()
        conn.close()
        return services
    
    def get_service(self, service_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id = ?', (service_id,))
        service = cursor.fetchone()
        conn.close()
        return service
    
    def add_order(self, user_id, service_id, amount):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        order_id = str(uuid.uuid4())[:8].upper()
        cursor.execute('''
            INSERT INTO orders (user_id, service_id, amount, payment_id, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, service_id, amount, order_id, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        return order_id
    
    def get_order(self, order_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, s.name, s.duration_days, s.traffic_gb 
            FROM orders o 
            JOIN services s ON o.service_id = s.id 
            WHERE o.payment_id = ?
        ''', (order_id,))
        order = cursor.fetchone()
        conn.close()
        return order
    
    def update_order_status(self, order_id, status, config_url=None):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        if config_url:
            order = self.get_order(order_id)
            if order:
                duration_days = order[10] # order[10] is duration_days
                expire_date = datetime.now() + timedelta(days=duration_days)
                cursor.execute('''
                    UPDATE orders 
                    SET status = ?, config_url = ?, expires_at = ?
                    WHERE payment_id = ?
                ''', (status, config_url, expire_date.isoformat(), order_id))
        else:
            cursor.execute('''
                UPDATE orders 
                SET status = ?
                WHERE payment_id = ?
            ''', (status, order_id))
        
        conn.commit()
        conn.close()
    
    def get_stats(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('SELECT COUNT(*) FROM orders WHERE created_at LIKE ?', (f'{today}%',))
        today_orders = cursor.fetchone()[0]
        
        # ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤
        cursor.execute('SELECT SUM(amount) FROM orders WHERE created_at LIKE ? AND status = "active"', (f'{today}%',))
        today_income = cursor.fetchone()[0] or 0
        
        # ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ
        cursor.execute('SELECT SUM(amount) FROM orders WHERE status = "active"')
        total_income = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_users': total_users,
            'today_orders': today_orders,
            'today_income': today_income,
            'total_income': total_income
        }

class HiddifyManager:
    def __init__(self):
        self.api_url = HIDDIFY_API_URL.rstrip('/')
        self.api_key = HIDDIFY_API_KEY
    
    def test_connection(self):
        """ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            response = requests.get(f'{self.api_url}/api/v1/admin/user/', 
                                  headers=headers, timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def create_user(self, username, traffic_limit_gb, expire_days):
        """ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ ÿØÿ± ŸæŸÜŸÑ HiddiFy"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'name': username,
                'usage_limit_GB': traffic_limit_gb,
                'package_days': expire_days,
                'mode': 'no_reset',
                'comment': f'Created by bot - {datetime.now().strftime("%Y-%m-%d %H:%M")}'
            }
            
            response = requests.post(f'{self.api_url}/api/v1/admin/user/', 
                                   json=data, headers=headers, timeout=30)
            
            if response.status_code in [200, 201]:
                result = response.json()
                # Hiddify API might return 'subscription_url' or 'config_url'
                return result.get('subscription_url') or result.get('config_url')
            
            return None
            
        except Exception as e:
            print(f"Error creating user: {e}")
            return None

class PaymentManager:
    def __init__(self):
        self.zarinpal_merchant = ZARINPAL_MERCHANT_ID
    
    def create_payment_url(self, amount, description, order_id):
        """ÿß€åÿ¨ÿßÿØ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ"""
        if not self.zarinpal_merchant:
            return None
            
        try:
            data = {
                'merchant_id': self.zarinpal_merchant,
                'amount': amount,
                'description': description,
                'callback_url': f'{BOT_WEBHOOK_URL}/verify/{order_id}' if BOT_WEBHOOK_URL else 'https://example.com'
            }
            
            response = requests.post(
                'https://api.zarinpal.com/pg/v4/payment/request.json',
                json=data, timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('data', {}).get('code') == 100:
                    authority = result['data']['authority']
                    return f"https://www.zarinpal.com/pg/StartPay/{authority}"
            
            return None
            
        except:
            return None

# ÿß€åÿ¨ÿßÿØ instance Ÿáÿß
db = DatabaseManager()
hiddify = HiddifyManager()
payment = PaymentManager()
bot = telebot.TeleBot(BOT_TOKEN)

# ⁄©€åÿ®Ÿàÿ±ÿØŸáÿß
def main_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service"),
        telebot.types.InlineKeyboardButton("üíé ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_services")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support"),
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help")
    )
    return keyboard

def services_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    services = db.get_services()
    
    for service in services:
        discount = ""
        if service[3] >= 90:  # ÿ®€åÿ¥ ÿßÿ≤ 3 ŸÖÿßŸá
            discount = " üî•"
        
        text = f"üì± {service[1]} - {service[2]:,} ÿ™ŸàŸÖÿßŸÜ{discount}"
        keyboard.add(telebot.types.InlineKeyboardButton(
            text, callback_data=f"service_{service[0]}"
        ))
    
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    return keyboard

def admin_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ±", callback_data="admin_stats"),
        telebot.types.InlineKeyboardButton("üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_users")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üì¶ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß", callback_data="admin_services"),
        telebot.types.InlineKeyboardButton("üí∞ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™", callback_data="admin_orders")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üîß ÿ™ÿ≥ÿ™ ÿ≥€åÿ≥ÿ™ŸÖ", callback_data="admin_test"),
        telebot.types.InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="back_main")
    )
    return keyboard

# ŸáŸÜÿØŸÑÿ±Ÿáÿß€å ÿßÿµŸÑ€å
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    db.add_user(user_id, username)
    
    welcome_text = f"""
üî• ÿ≥ŸÑÿßŸÖ {message.from_user.first_name} ÿπÿ≤€åÿ≤!

ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN Ÿæÿ±ÿ≥ÿ±ÿπÿ™ ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å! üöÄ

üåü Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿÆÿßÿµ ŸÖÿß:
‚úÖ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá ÿ®ÿßŸÑÿß
‚úÖ Ÿæÿß€åÿØÿßÿ±€å €π€π.€πŸ™ 
‚úÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å €≤€¥ ÿ≥ÿßÿπÿ™Ÿá
‚úÖ ŸÇ€åŸÖÿ™‚ÄåŸáÿß€å ÿßÿ≥ÿ™ÿ´ŸÜÿß€å€å
‚úÖ ŸÜÿµÿ® ÿ¢ÿ≥ÿßŸÜ ÿ±Ÿà€å ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
‚úÖ ÿ®ÿØŸàŸÜ ŸÇÿ∑ÿπ€å Ÿà ŸÅ€åŸÑÿ™ÿ±€åŸÜ⁄Ø

üíé Ÿà€å⁄òŸá ÿß€åŸÜ ŸÖÿßŸá: ÿ™ÿÆŸÅ€åŸÅ ÿ™ÿß €µ€∞Ÿ™ ÿ±Ÿà€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!

ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id in ADMIN_IDS:
        admin_text = """
üîß ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™

ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å ŸÖÿØ€åÿ± ÿπÿ≤€åÿ≤!
ÿßÿ≤ ŸÖŸÜŸà€å ÿ≤€åÿ± ⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
        bot.send_message(message.chat.id, admin_text, reply_markup=admin_keyboard())
    else:
        bot.reply_to(message, "‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿßÿØŸÖ€åŸÜ ŸÜÿØÿßÿ±€åÿØ!")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    
    try:
        if call.data == "buy_service":
            show_services(call)
        
        elif call.data.startswith("service_"):
            service_id = int(call.data.split("_")[1])
            show_service_details(call, service_id)
        
        elif call.data.startswith("buy_"):
            service_id = int(call.data.split("_")[1])
            start_purchase(call, service_id)
        
        elif call.data.startswith("paid_"):
            order_id = call.data.split("_")[1]
            handle_payment_confirmation(call, order_id)
        
        elif call.data == "my_services":
            show_user_services(call)
        
        elif call.data == "support":
            show_support_info(call)
        
        elif call.data == "help":
            show_help(call)
        
        elif call.data == "back_main":
            show_main_menu(call)
        
        # ÿßÿØŸÖ€åŸÜ handlers
        elif call.data.startswith("admin_") and user_id in ADMIN_IDS:
            handle_admin_callback(call)
            
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™!")
        print(f"Callback error: {e}")

def show_services(call):
    text = """
üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å VPN

üíé Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å Ÿà€å⁄òŸá ŸÖÿß:

üî• ÿ™ÿÆŸÅ€åŸÅ‚ÄåŸáÿß€å Ÿà€å⁄òŸá ÿ®ÿ±ÿß€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!
‚ö° ÿ≥ÿ±ÿπÿ™ ÿ®ÿßŸÑÿß Ÿà Ÿæÿß€åÿØÿßÿ±€å ÿ™ÿ∂ŸÖ€åŸÜ€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß Ÿà ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß

Ÿæ⁄©€åÿ¨ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=services_keyboard())

def show_service_details(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ™ÿÆŸÅ€åŸÅ
    discount_text = ""
    if service[3] >= 180:  # 6 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €¥€¥Ÿ™ - Ÿæ€åÿ¥ŸÜŸáÿßÿØ Ÿà€å⁄òŸá!"
    elif service[3] >= 90:  # 3 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €≥€≥Ÿ™ - Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±!"
    
    text = f"""
üì± {service[1]}

üí∞ ŸÇ€åŸÖÿ™: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
‚è± ŸÖÿØÿ™: {service[3]} ÿ±Ÿàÿ≤  
üìä ÿ≠ÿ¨ŸÖ: {service[4]} ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™
üìù {service[5]}{discount_text}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ú® ŸÖÿ≤ÿß€åÿß€å ÿß€åŸÜ Ÿæ⁄©€åÿ¨:

üöÄ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá (ÿ™ÿß €∏€∞ ŸÖ⁄Ø)
üõ°Ô∏è ÿßŸÖŸÜ€åÿ™ ⁄©ÿßŸÖŸÑ Ÿà ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ŸÇŸà€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß
üì± ÿ≥ÿßÿ≤⁄Øÿßÿ± ÿ®ÿß ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
üîÑ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ŸáŸÖŸá Ÿæÿ±Ÿàÿ™⁄©ŸÑ‚ÄåŸáÿß
‚ö° ÿßÿ™ÿµÿßŸÑ ŸÅŸàÿ±€å ÿ®ÿØŸàŸÜ ÿ™ÿ£ÿÆ€åÿ±
üéØ IP ÿßÿÆÿ™ÿµÿßÿµ€å Ÿà ÿ™ŸÖ€åÿ≤

üíé ⁄Øÿßÿ±ÿßŸÜÿ™€å €±€∞€∞Ÿ™ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ Ÿàÿ¨Ÿá ÿØÿ± ÿµŸàÿ±ÿ™ ÿπÿØŸÖ ÿ±ÿ∂ÿß€åÿ™
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(
        f"üí≥ ÿÆÿ±€åÿØ {service[2]:,} ÿ™ŸàŸÖÿßŸÜ", 
        callback_data=f"buy_{service_id}"
    ))
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="buy_service"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def start_purchase(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    user_id = call.from_user.id
    order_id = db.add_order(user_id, service_id, service[2])
    
    # ÿ≥ÿßÿÆÿ™ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™
    payment_url = payment.create_payment_url(
        service[2], 
        f"ÿÆÿ±€åÿØ {service[1]}", 
        order_id
    )
    
    payment_text = f"""
üí≥ ÿµŸàÿ±ÿ™ÿ≠ÿ≥ÿßÿ® ÿÆÿ±€åÿØ

üì± ÿ≥ÿ±Ÿà€åÿ≥: {service[1]}
üí∞ ŸÖÿ®ŸÑÿ∫: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí≥ ÿ±Ÿàÿ¥‚ÄåŸáÿß€å Ÿæÿ±ÿØÿßÿÆÿ™:
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    
    if payment_url:
        keyboard.add(telebot.types.InlineKeyboardButton(
            "üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ (ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)", url=payment_url
        ))
    
    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™
    if CARD_NUMBER:
        payment_text += f"""

üí≥ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™:

{CARD_NUMBER}
ÿ®Ÿá ŸÜÿßŸÖ: {CARD_HOLDER_NAME}

üì± ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ ÿ¨Ÿáÿ™ ÿ™ÿ£€å€åÿØ:
{SUPPORT_PHONE}
"""
        
    keyboard.add(telebot.types.InlineKeyboardButton(
        "‚úÖ Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿ±ÿØŸÖ", callback_data=f"paid_{order_id}"
    ))
    keyboard.types.InlineKeyboardButton("‚ùå ÿßŸÜÿµÿ±ÿßŸÅ", callback_data="back_main")
    
    payment_text += "\n\n‚ö†Ô∏è ÿ®ÿπÿØ ÿßÿ≤ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ÿØ⁄©ŸÖŸá 'Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿ±ÿØŸÖ' ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ."
    
    bot.edit_message_text(payment_text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard, 
                        parse_mode='Markdown')

def handle_payment_confirmation(call, order_id):
    order = db.get_order(order_id)
    if not order:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    text = f"""
‚úÖ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¥ŸÖÿß ÿ´ÿ®ÿ™ ÿ¥ÿØ!

üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}
üì± ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
üí∞ ŸÖÿ®ŸÑÿ∫: {order[3]:,} ÿ™ŸàŸÖÿßŸÜ

üìã Ÿàÿ∂ÿπ€åÿ™: ÿØÿ± ÿßŸÜÿ™ÿ∏ÿßÿ± ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™

‚è∞ ÿ≤ŸÖÿßŸÜ ÿ®ÿ±ÿ±ÿ≥€å: ÿ≠ÿØÿß⁄©ÿ´ÿ± €±€∞ ÿØŸÇ€åŸÇŸá
üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: {SUPPORT_USERNAME}

‚ú® ÿ®ÿπÿØ ÿßÿ≤ ÿ™ÿ£€å€åÿØÿå ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ŸÅŸàÿ±ÿßŸã ŸÅÿπÿßŸÑ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ!
"""
    
    bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    
    # ÿßÿ∑ŸÑÿßÿπ ÿ®Ÿá ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
    admin_text = f"""
üîî ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¨ÿØ€åÿØ!

üë§ ⁄©ÿßÿ±ÿ®ÿ±: {call.from_user.first_name}
üÜî €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{call.from_user.username or 'ŸÜÿØÿßÿ±ÿØ'}
üì± ÿ¢€åÿØ€å: {call.from_user.id}

üõí ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
üí∞ ŸÖÿ®ŸÑÿ∫: {order[3]:,} ÿ™ŸàŸÖÿßŸÜ
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

ÿ®ÿ±ÿß€å ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å: /activate {order_id}
"""
    
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, admin_text)
        except:
            pass

def show_user_services(call):
    # ÿß€åŸÜÿ¨ÿß ŸÖ€å‚Äåÿ™ŸàŸÜ€åÿØ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ ⁄©ÿßÿ±ÿ®ÿ± ÿ±Ÿà ŸÜŸÖÿß€åÿ¥ ÿ®ÿØ€åÿØ
    text = """
üíé ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ÿ¥ŸÖÿß

ŸÖÿ™ÿ£ÿ≥ŸÅÿßŸÜŸá ŸáŸÜŸàÿ≤ ÿ≥ÿ±Ÿà€åÿ≥€å ŸÅÿπÿßŸÑ ŸÜÿØÿßÿ±€åÿØ.
ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¨ÿØ€åÿØ ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.

üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: @YourSupportUsername
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service"))
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_support_info(call):
    text = f"""
üìû ÿ±ÿßŸá‚ÄåŸáÿß€å ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å

üÜî ÿ™ŸÑ⁄Øÿ±ÿßŸÖ: {SUPPORT_USERNAME}
üì± ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥: {SUPPORT_PHONE}

‚è∞ ÿ≥ÿßÿπÿßÿ™ Ÿæÿßÿ≥ÿÆ⁄ØŸà€å€å:
üåÖ ÿµÿ®ÿ≠: €π:€∞€∞ ÿ™ÿß €±€≤:€∞€∞
üåÜ ÿπÿµÿ±: €±€∂:€∞€∞ ÿ™ÿß €≤€≥:€∞€∞

üí¨ ÿ®ÿ±ÿß€å Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ≥ÿ±€åÿπ‚Äåÿ™ÿ±ÿå ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥ ÿÆŸàÿØ ÿ±ÿß ŸáŸÖÿ±ÿßŸá Ÿæ€åÿßŸÖ ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åÿØ.

‚ú® ÿ™€åŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÖÿß ÿ¢ŸÖÿßÿØŸá ⁄©ŸÖ⁄© ÿ®Ÿá ÿ¥ŸÖÿß Ÿáÿ≥ÿ™ŸÜÿØ!
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_help(call):
    text = """
‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß€å ÿßÿ≥ÿ™ŸÅÿßÿØŸá

üì± ŸÜÿ≠ŸàŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿ≥ÿ±Ÿà€åÿ≥:

1Ô∏è‚É£ €å⁄©€å ÿßÿ≤ Ÿæ⁄©€åÿ¨‚ÄåŸáÿß ÿ±ÿß ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ ÿ®ÿπÿØ ÿßÿ≤ ÿ™ÿ£€å€åÿØ Ÿæÿ±ÿØÿßÿÆÿ™ÿå ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø ÿØÿ±€åÿßŸÅÿ™ ⁄©ŸÜ€åÿØ
3Ô∏è‚É£ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ ŸÖŸÜÿßÿ≥ÿ® ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ:
   ‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: v2rayNG €åÿß Hiddify
   ‚Ä¢ ÿ¢€åŸÅŸàŸÜ: Fair VPN €åÿß Streisand  
   ‚Ä¢ Ÿà€åŸÜÿØŸàÿ≤: v2rayN €åÿß Hiddify
   ‚Ä¢ ŸÖ⁄©: ClashX €åÿß V2rayU

4Ô∏è‚É£ ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ±ÿß ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ
5Ô∏è‚É£ ÿ±Ÿà€å Connect ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ

üîó ŸÑ€åŸÜ⁄© ÿØÿßŸÜŸÑŸàÿØ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß:
‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: bit.ly/v2rayng-app
‚Ä¢ ÿ¢€åŸÅŸàŸÜ: bit.ly/fair-vpn-app

‚ùì ÿ≥ŸàÿßŸÑÿßÿ™ ŸÖÿ™ÿØÿßŸàŸÑ ÿØÿ± ⁄©ÿßŸÜÿßŸÑ: @YourChannelUsername

üéØ ÿ®ÿ±ÿß€å ÿ±ÿßŸáŸÜŸÖÿß€å€å ÿ®€åÿ¥ÿ™ÿ± ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿ™ŸÖÿßÿ≥ ÿ®⁄Ø€åÿ±€åÿØ.
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def show_main_menu(call):
    text = """
üè† ŸÖŸÜŸà€å ÿßÿµŸÑ€å

ÿÆŸàÿ¥ ÿ®ÿ±⁄Øÿ¥ÿ™€å! üéâ
€å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=main_keyboard())

def handle_admin_callback(call):
    if call.data == "admin_stats":
        stats = db.get_stats()
        stats_text = f"""
üìä ÿ¢ŸÖÿßÿ± ⁄©ŸÑ€å ÿ±ÿ®ÿßÿ™

üë• ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']:,}
üì¶ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_orders']}
üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_income']:,} ÿ™ŸàŸÖÿßŸÜ
üíé ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {stats['total_income']:,} ÿ™ŸàŸÖÿßŸÜ

üîß Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ: {"‚úÖ ÿπÿßÿØ€å" if hiddify.test_connection() else "‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ™ÿµÿßŸÑ"}

üìÖ {datetime.now().strftime('%Y/%m/%d %H:%M')}
"""
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="admin_stats"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        
        bot.edit_message_text(stats_text, call.message.chat.id, 
                            call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "admin_test":
        hiddify_status = "‚úÖ ŸÖÿ™ÿµŸÑ" if hiddify.test_connection() else "‚ùå ŸÇÿ∑ÿπ"
        
        test_text = f"""
üîß ÿ™ÿ≥ÿ™ ÿ≥€åÿ≥ÿ™ŸÖ

üåê ÿßÿ™ÿµÿßŸÑ HiddiFy: {hiddify_status}
üí≥ ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™: {"‚úÖ ŸÅÿπÿßŸÑ" if payment.zarinpal_merchant else "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"}
üíæ ÿØ€åÿ™ÿßÿ®€åÿ≥: ‚úÖ ŸÅÿπÿßŸÑ

üì° ÿ¢ÿØÿ±ÿ≥ API: {HIDDIFY_API_URL}
üîë ⁄©ŸÑ€åÿØ API: {"‚úÖ ÿ™ŸÜÿ∏€åŸÖ ÿ¥ÿØŸá" if HIDDIFY_API_KEY else "‚ùå ÿ™ŸÜÿ∏€åŸÖ ŸÜÿ¥ÿØŸá"}

‚öôÔ∏è ÿ™ÿ≥ÿ™ ÿ¥ÿØŸá ÿØÿ±: {datetime.now().strftime('%H:%M:%S')}
"""
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîÑ ÿ™ÿ≥ÿ™ ŸÖÿ¨ÿØÿØ", callback_data="admin_test"))
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        
        bot.edit_message_text(test_text, call.message.chat.id, 
                            call.message.message_id, reply_markup=keyboard)
    
    elif call.data == "admin_users":
        conn = sqlite3.connect(db.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, username, join_date FROM users ORDER BY join_date DESC LIMIT 10')
        users = cursor.fetchall()
        conn.close()

        user_list_text = "üë• **€±€∞ ⁄©ÿßÿ±ÿ®ÿ± ÿßÿÆ€åÿ±:**\n\n"
        if users:
            for user in users:
                user_list_text += f"‚ñ™Ô∏è ID: `{user[0]}`\n"
                user_list_text += f"   €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{user[1] or 'ŸÜÿØÿßÿ±ÿØ'}\n"
                user_list_text += f"   ÿ™ÿßÿ±€åÿÆ ÿπÿ∂Ÿà€åÿ™: {datetime.fromisoformat(user[2]).strftime('%Y/%m/%d')}\n"
                user_list_text += "----------\n"
        else:
            user_list_text = "⁄©ÿßÿ±ÿ®ÿ±€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        bot.edit_message_text(user_list_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

    elif call.data == "admin_orders":
        conn = sqlite3.connect(db.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.payment_id, o.amount, o.status, o.created_at, s.name, o.user_id
            FROM orders o
            JOIN services s ON o.service_id = s.id  
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = cursor.fetchall()
        conn.close()

        orders_text = "üìã **€±€∞ ÿ≥ŸÅÿßÿ±ÿ¥ ÿßÿÆ€åÿ±:**\n\n"
        if orders:
            for order in orders:
                status_emoji = "‚úÖ" if order[2] == "active" else "‚è≥" if order[2] == "pending" else "‚ùå"
                date = datetime.fromisoformat(order[3]).strftime('%m/%d %H:%M')
                
                orders_text += f"""
{status_emoji} #{order[0]}
üí∞ {order[1]:,} ÿ™ŸàŸÖÿßŸÜ - {order[4]}
üë§ ⁄©ÿßÿ±ÿ®ÿ±: `{order[5]}` | üìÖ {date}
{'‚îÄ' * 35}
"""
        else:
            orders_text = "ÿ≥ŸÅÿßÿ±ÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ."

        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        bot.edit_message_text(orders_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')

    elif call.data == "admin_services":
        services = db.get_services()
        service_list_text = "üì¶ **ŸÑ€åÿ≥ÿ™ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß:**\n\n"
        if services:
            for service in services:
                service_list_text += f"‚ñ™Ô∏è ID: `{service[0]}`\n"
                service_list_text += f"   ŸÜÿßŸÖ: {service[1]}\n"
                service_list_text += f"   ŸÇ€åŸÖÿ™: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ\n"
                service_list_text += f"   ŸÖÿØÿ™: {service[3]} ÿ±Ÿàÿ≤\n"
                service_list_text += f"   ÿ≠ÿ¨ŸÖ: {service[4]} GB\n"
                service_list_text += "----------\n"
        else:
            service_list_text = "ÿ≥ÿ±Ÿà€åÿ≥€å ÿ™ÿπÿ±€åŸÅ ŸÜÿ¥ÿØŸá ÿßÿ≥ÿ™. ÿßÿ≤ ÿØÿ≥ÿ™Ÿàÿ± /addservice ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ."
        
        keyboard = telebot.types.InlineKeyboardMarkup()
        keyboard.add(telebot.types.InlineKeyboardButton("üîô ŸæŸÜŸÑ ÿßÿØŸÖ€åŸÜ", callback_data="admin_back"))
        bot.edit_message_text(service_list_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        
    elif call.data == "admin_back":
        admin_command(call.message)


# ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿßÿØŸÖ€åŸÜ
@bot.message_handler(commands=['activate'])
def activate_service(message):
    if message.from_user.id not in ADMIN_IDS:
        bot.reply_to(message, "‚ùå ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ∫€åÿ±ŸÖÿ¨ÿßÿ≤!")
        return
    
    try:
        parts = message.text.split()
        if len(parts) != 2:
            bot.reply_to(message, "‚ùå ŸÅÿ±ŸÖÿ™: /activate ORDER_ID")
            return
        
        order_id = parts[1]
        order = db.get_order(order_id)
        
        if not order:
            bot.reply_to(message, "‚ùå ÿ≥ŸÅÿßÿ±ÿ¥ Ÿæ€åÿØÿß ŸÜÿ¥ÿØ!")
            return
        
        if order[4] == 'active':
            bot.reply_to(message, "‚ö†Ô∏è ÿß€åŸÜ ÿ≥ÿ±Ÿà€åÿ≥ ŸÇÿ®ŸÑÿßŸã ŸÅÿπÿßŸÑ ÿ¥ÿØŸá!")
            return
        
        # ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ÿØÿ± HiddiFy
        username = f"user_{order[1]}_{order_id}"
        config_url = hiddify.create_user(username, order[11], order[10])
        
        if config_url:
            # ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿàÿ∂ÿπ€åÿ™ ÿ≥ŸÅÿßÿ±ÿ¥
            db.update_order_status(order_id, 'active', config_url)
            
            # ÿßÿ±ÿ≥ÿßŸÑ ⁄©ÿßŸÜŸÅ€å⁄Ø ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±
            expire_date = datetime.fromisoformat(db.get_order(order_id)[7]) # Get expires_at from updated order
            
            config_text = f"""
üéâ ÿ≥ÿ±Ÿà€åÿ≥ ÿ¥ŸÖÿß ŸÅÿπÿßŸÑ ÿ¥ÿØ!

üì± ÿ≥ÿ±Ÿà€åÿ≥: {order[8]}
‚è∞ ŸÖÿØÿ™: {order[10]} ÿ±Ÿàÿ≤
üìä ÿ≠ÿ¨ŸÖ: {order[11]} ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

üîó ŸÑ€åŸÜ⁄© ⁄©ÿßŸÜŸÅ€å⁄Ø:

{config_url}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üì± ŸÜÿ≠ŸàŸá ÿßÿ≥ÿ™ŸÅÿßÿØŸá:

1Ô∏è‚É£ ŸÑ€åŸÜ⁄© ÿ®ÿßŸÑÿß ÿ±ÿß ⁄©Ÿæ€å ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ €å⁄©€å ÿßÿ≤ ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±ÿß ŸÜÿµÿ® ⁄©ŸÜ€åÿØ:
   ‚Ä¢ ÿßŸÜÿØÿ±Ÿà€åÿØ: v2rayNG
   ‚Ä¢ ÿ¢€åŸÅŸàŸÜ: Fair VPN
   ‚Ä¢ Ÿà€åŸÜÿØŸàÿ≤: v2rayN

3Ô∏è‚É£ ŸÑ€åŸÜ⁄© ÿ±ÿß ÿØÿ± ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ import ⁄©ŸÜ€åÿØ
4Ô∏è‚É£ ÿ±Ÿà€å Connect ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ

‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ™ÿß {expire_date.strftime('%Y/%m/%d')} ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™

üî∞ ÿ±ÿßŸáŸÜŸÖÿß€å ⁄©ÿßŸÖŸÑ: /help
üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å: {SUPPORT_USERNAME}

üåü ÿßÿ≤ ÿÆÿ±€åÿØ ÿ¥ŸÖÿß ŸÖÿ™ÿ¥⁄©ÿ±€åŸÖ!
"""
            
            try:
                bot.send_message(order[1], config_text, parse_mode='Markdown')
                bot.reply_to(message, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ÿ®ÿ±ÿß€å ⁄©ÿßÿ±ÿ®ÿ± {order[1]} ŸÅÿπÿßŸÑ ÿ¥ÿØ!")
            except:
                bot.reply_to(message, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ ŸÅÿπÿßŸÑ ÿ¥ÿØ ÿßŸÖÿß ⁄©ÿßÿ±ÿ®ÿ± ÿ±ÿß ÿ®ŸÑÿß⁄© ⁄©ÿ±ÿØŸá!")
        else:
            bot.reply_to(message, "‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿ± ŸæŸÜŸÑ HiddiFy!")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")

@bot.message_handler(commands=['addservice'])
def add_service_cmd(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        # ŸÅÿ±ŸÖÿ™: /addservice ŸÜÿßŸÖ ŸÇ€åŸÖÿ™ ŸÖÿØÿ™_ÿ±Ÿàÿ≤ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™
        parts = message.text.split(maxsplit=5)
        if len(parts) != 6:
            bot.reply_to(message, """
‚ùå ŸÅÿ±ŸÖÿ™ ŸÜÿßÿØÿ±ÿ≥ÿ™!

‚úÖ ŸÅÿ±ŸÖÿ™ ÿµÿ≠€åÿ≠:
/addservice ŸÜÿßŸÖ ŸÇ€åŸÖÿ™ ŸÖÿØÿ™_ÿ±Ÿàÿ≤ ÿ≠ÿ¨ŸÖ_⁄Ø€å⁄Ø ÿ™Ÿàÿ∂€åÿ≠ÿßÿ™

üìù ŸÖÿ´ÿßŸÑ:
/addservice Ÿæ⁄©€åÿ¨_ÿ¨ÿØ€åÿØ 75000 60 100 Ÿæ⁄©€åÿ¨_ÿØŸà_ŸÖÿßŸáŸá_ÿ®ÿß_ÿ™ÿÆŸÅ€åŸÅ
""")
            return
        
        name = parts[1].replace('_', ' ')
        price = int(parts[2])
        duration = int(parts[3])
        traffic = int(parts[4])
        description = parts[5].replace('_', ' ')
        
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO services (name, price, duration_days, traffic_gb, description)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, price, duration, traffic, description))
        conn.commit()
        conn.close()
        
        bot.reply_to(message, f"‚úÖ ÿ≥ÿ±Ÿà€åÿ≥ '{name}' ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ!")
        
    except ValueError:
        bot.reply_to(message, "‚ùå ŸÇ€åŸÖÿ™ÿå ŸÖÿØÿ™ Ÿà ÿ≠ÿ¨ŸÖ ÿ®ÿß€åÿØ ÿπÿØÿØ ÿ®ÿßÿ¥ŸÜÿØ!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")

@bot.message_handler(commands=['stats'])
def stats_command(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    stats = db.get_stats()
    hiddify_status = "‚úÖ ŸÖÿ™ÿµŸÑ" if hiddify.test_connection() else "‚ùå ŸÇÿ∑ÿπ"
    
    stats_text = f"""
üìä ÿ¢ŸÖÿßÿ± ⁄©ÿßŸÖŸÑ ÿ±ÿ®ÿßÿ™

üë• ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ: {stats['total_users']:,}
üì¶ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_orders']}
üí∞ ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤: {stats['today_income']:,} ÿ™ŸàŸÖÿßŸÜ
üíé ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ: {stats['total_income']:,} ÿ™ŸàŸÖÿßŸÜ

üîß Ÿàÿ∂ÿπ€åÿ™ ÿ≥€åÿ≥ÿ™ŸÖ‚ÄåŸáÿß:
üåê HiddiFy Panel: {hiddify_status}
üí≥ ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™: {"‚úÖ ŸÅÿπÿßŸÑ" if payment.zarinpal_merchant else "‚ùå ÿ∫€åÿ±ŸÅÿπÿßŸÑ"}
üíæ ÿØ€åÿ™ÿßÿ®€åÿ≥: ‚úÖ ŸÅÿπÿßŸÑ

üìÖ {datetime.now().strftime('%Y/%m/%d - %H:%M:%S')}
"""
    
    bot.send_message(message.chat.id, stats_text)

@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        # ŸÅÿ±ŸÖÿ™: /broadcast Ÿæ€åÿßŸÖ ÿ¥ŸÖÿß
        text = message.text[11:].strip()  # ÿ≠ÿ∞ŸÅ /broadcast
        if not text:
            bot.reply_to(message, "‚ùå Ÿæ€åÿßŸÖ ÿÆÿßŸÑ€å ÿßÿ≥ÿ™!\n‚úÖ ŸÅÿ±ŸÖÿ™: /broadcast Ÿæ€åÿßŸÖ ÿ¥ŸÖÿß")
            return
        
        # ÿØÿ±€åÿßŸÅÿ™ ŸÑ€åÿ≥ÿ™ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE is_active = 1')
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        failed_count = 0
        
        bot.reply_to(message, f"üì° ÿ¥ÿ±Ÿàÿπ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ®Ÿá {len(users)} ⁄©ÿßÿ±ÿ®ÿ±...")
        
        for user in users:
            try:
                bot.send_message(user[0], text)
                sent_count += 1
            except:
                failed_count += 1
        
        result_text = f"""
‚úÖ ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ!

üì§ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØŸá: {sent_count}
‚ùå ŸÜÿßŸÖŸàŸÅŸÇ: {failed_count}
üë• ⁄©ŸÑ: {len(users)}
"""
        bot.send_message(message.chat.id, result_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ: {str(e)}")

@bot.message_handler(commands=['orders'])
def show_recent_orders(message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        conn = sqlite3.connect('vpn_bot.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.payment_id, o.amount, o.status, o.created_at, s.name, o.user_id
            FROM orders o
            JOIN services s ON o.service_id = s.id  
            ORDER BY o.created_at DESC
            LIMIT 10
        ''')
        orders = cursor.fetchall()
        conn.close()
        
        if not orders:
            bot.reply_to(message, "üì≠ Ÿá€å⁄Ü ÿ≥ŸÅÿßÿ±ÿ¥€å €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
            return
        
        orders_text = "üìã ÿ¢ÿÆÿ±€åŸÜ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™:\n\n"
        
        for order in orders:
            status_emoji = "‚úÖ" if order[2] == "active" else "‚è≥" if order[2] == "pending" else "‚ùå"
            date = datetime.fromisoformat(order[3]).strftime('%m/%d %H:%M')
            
            orders_text += f"""
{status_emoji} #{order[0]}
üí∞ {order[1]:,} ÿ™ŸàŸÖÿßŸÜ - {order[4]}
üë§ ⁄©ÿßÿ±ÿ®ÿ±: {order[5]} | üìÖ {date}
{'‚îÄ' * 35}
"""
        
        bot.send_message(message.chat.id, orders_text)
        
    except Exception as e:
        bot.reply_to(message, f"‚ùå ÿÆÿ∑ÿß: {str(e)}")

if __name__ == "__main__":
    print("üöÄ ÿØÿ± ÿ≠ÿßŸÑ ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™...")
    print(f"ü§ñ ŸÜÿßŸÖ ÿ±ÿ®ÿßÿ™: {bot.get_me().first_name}")
    print(f"üÜî €åŸàÿ≤ÿ±ŸÜ€åŸÖ: @{bot.get_me().username}")
    print("‚úÖ ÿ±ÿ®ÿßÿ™ ÿ¢ŸÖÿßÿØŸá ÿßÿ≥ÿ™!")
    
    try:
        bot.infinity_polling(none_stop=True)
    except Exception as e:
        print(f"‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ¨ÿ±ÿß€å ÿ±ÿ®ÿßÿ™: {e}")
EOF

echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ bot.py ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ systemd service
echo -e "${YELLOW}‚öôÔ∏è ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥ systemd...${NC}"
cat > /etc/systemd/system/vpn-bot.service << EOF
[Unit]
Description=VPN Sales Bot
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$PROJECT_DIR/venv/bin
ExecStart=$PROJECT_DIR/venv/bin/python bot.py
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload
check_success "ÿß€åÿ¨ÿßÿØ ÿ≥ÿ±Ÿà€åÿ≥"

# ÿßÿ≥⁄©ÿ±€åŸæÿ™ ŸÖÿØ€åÿ±€åÿ™
cat > manage.sh << 'EOF'
#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

show_menu() {
    echo -e "${BLUE}ü§ñ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN${NC}"
    echo "=========================="
    echo "1. ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™"
    echo "2. ÿ™ŸàŸÇŸÅ ÿ±ÿ®ÿßÿ™" 
    echo "3. Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™"
    echo "4. ŸÖÿ¥ÿßŸáÿØŸá ŸÑÿß⁄Ø‚ÄåŸáÿß"
    echo "5. Ÿà€åÿ±ÿß€åÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™"
    echo "6. ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™"
    echo "7. ÿ™ŸÜÿ∏€åŸÖ ŸÅÿß€åÿ±ŸàÿßŸÑ"
    echo "8. ÿÆÿ±Ÿàÿ¨"
    echo -n "ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ [1-8]: "
}

start_bot() {
    echo -e "${YELLOW}üöÄ ÿØÿ± ÿ≠ÿßŸÑ ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl enable vpn-bot
    systemctl start vpn-bot
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ¥ÿ±Ÿàÿπ ÿ±ÿ®ÿßÿ™${NC}"
    fi
}

stop_bot() {
    echo -e "${YELLOW}üõë ÿØÿ± ÿ≠ÿßŸÑ ÿ™ŸàŸÇŸÅ ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl stop vpn-bot
    echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ŸÖÿ™ŸàŸÇŸÅ ÿ¥ÿØ${NC}"
}

status_bot() {
    echo -e "${BLUE}üìä Ÿàÿ∂ÿπ€åÿ™ ÿ±ÿ®ÿßÿ™:${NC}"
    systemctl status vpn-bot --no-pager -l
}

show_logs() {
    echo -e "${BLUE}üìã ŸÑÿß⁄Ø‚ÄåŸáÿß€å ÿ±ÿ®ÿßÿ™:${NC}"
    echo "ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨ Ctrl+C ÿ®ÿ≤ŸÜ€åÿØ"
    journalctl -u vpn-bot -f
}

edit_config() {
    echo -e "${YELLOW}‚öôÔ∏è Ÿà€åÿ±ÿß€åÿ¥ ÿ™ŸÜÿ∏€åŸÖÿßÿ™...${NC}"
    nano config.py
    echo -e "${GREEN}‚úÖ ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ${NC}"
    echo -e "${YELLOW}üîÑ ÿ®ÿ±ÿß€å ÿßÿπŸÖÿßŸÑ ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ±ÿß restart ⁄©ŸÜ€åÿØ${NC}"
}

restart_bot() {
    echo -e "${YELLOW}üîÑ ÿØÿ± ÿ≠ÿßŸÑ ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ±ÿ®ÿßÿ™...${NC}"
    systemctl restart vpn-bot
    echo -e "${GREEN}‚úÖ ÿ±ÿ®ÿßÿ™ ÿ®ÿßÿ≤ŸÜÿ¥ÿßŸÜ€å ÿ¥ÿØ${NC}"
}

setup_firewall() {
    echo -e "${YELLOW}üî• ÿ™ŸÜÿ∏€åŸÖ ŸÅÿß€åÿ±ŸàÿßŸÑ...${NC}"
    ufw --force enable
    ufw allow ssh
    ufw allow 443
    ufw allow 80
    echo -e "${GREEN}‚úÖ ŸÅÿß€åÿ±ŸàÿßŸÑ Ÿæ€å⁄©ÿ±ÿ®ŸÜÿØ€å ÿ¥ÿØ${NC}"
}

while true; do
    show_menu
    read choice
    case $choice in
        1) start_bot ;;
        2) stop_bot ;;
        3) status_bot ;;
        4) show_logs ;;
        5) edit_config ;;
        6) restart_bot ;;
        7) setup_firewall ;;
        8) echo -e "${GREEN}üëã ÿÆÿØÿßÿ≠ÿßŸÅÿ∏!${NC}"; exit 0 ;;
        *) echo -e "${RED}‚ùå ÿßŸÜÿ™ÿÆÿßÿ® ŸÜÿßŸÖÿπÿ™ÿ®ÿ±${NC}" ;;
    esac
    echo
    read -p "ÿ®ÿ±ÿß€å ÿßÿØÿßŸÖŸá Enter ÿ®ÿ≤ŸÜ€åÿØ..."
done
EOF

chmod +x manage.sh
check_success "ÿß€åÿ¨ÿßÿØ ÿßÿ≥⁄©ÿ±€åŸæÿ™ ŸÖÿØ€åÿ±€åÿ™"

# ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿ®⁄©‚Äåÿ¢Ÿæ
mkdir -p /opt/backups
cat > backup.sh << 'EOF'
#!/bin/bash
DATE=$(date +%Y%m%d_%H%M)
BACKUP_DIR="/opt/backups"
PROJECT_DIR="/opt/vpn-bot"

echo "üóÑÔ∏è ÿß€åÿ¨ÿßÿØ ÿ®⁄©‚Äåÿ¢Ÿæ..."
tar -czf "$BACKUP_DIR/vpn-bot-backup-$DATE.tar.gz" -C "$PROJECT_DIR" .

# ÿ≠ÿ∞ŸÅ ÿ®⁄©‚Äåÿ¢Ÿæ‚ÄåŸáÿß€å ŸÇÿØ€åŸÖ€å (ÿ®€åÿ¥ÿ™ÿ± ÿßÿ≤ 7 ÿ±Ÿàÿ≤)
find "$BACKUP_DIR" -name "vpn-bot-backup-*.tar.gz" -mtime +7 -delete

echo "‚úÖ ÿ®⁄©‚Äåÿ¢Ÿæ ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ: vpn-bot-backup-$DATE.tar.gz"
EOF

chmod +x backup.sh

# ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ cron job ÿ®ÿ±ÿß€å ÿ®⁄©‚Äåÿ¢Ÿæ ÿ±Ÿàÿ≤ÿßŸÜŸá
(crontab -l 2>/dev/null; echo "0 2 * * * /opt/vpn-bot/backup.sh >> /var/log/vpn-bot-backup.log 2>&1") | crontab -

echo -e "${GREEN}‚úÖ ŸÜÿµÿ® ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™⁄©ŸÖ€åŸÑ ÿ¥ÿØ!${NC}"
echo ""
echo -e "${BLUE}üìã ŸÖÿ±ÿßÿ≠ŸÑ ÿ®ÿßŸÇ€å‚ÄåŸÖÿßŸÜÿØŸá:${NC}"
echo "1. ŸÅÿß€åŸÑ config.py ÿ±ÿß Ÿà€åÿ±ÿß€åÿ¥ ⁄©ŸÜ€åÿØ:"
echo "   nano $PROJECT_DIR/config.py"
echo ""
echo "2. ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≤€åÿ± ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:"
echo "   - ÿ™Ÿà⁄©ŸÜ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ"
echo "   - ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß" 
echo "   - ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÜŸÑ HiddiFy"
echo "   - ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿØÿ±⁄ØÿßŸá Ÿæÿ±ÿØÿßÿÆÿ™ (ÿßÿÆÿ™€åÿßÿ±€å: ÿß⁄Øÿ± ÿßÿ≤ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ŸÖ€å‚Äå⁄©ŸÜ€åÿØ)"
echo ""
echo "3. ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™ ÿßÿ≤ ÿßÿ≥⁄©ÿ±€åŸæÿ™ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ:"
echo "   cd $PROJECT_DIR && ./manage.sh"
echo ""
echo -e "${YELLOW}üîó ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÖŸáŸÖ:${NC}"
echo "   üìÅ Ÿæÿ±Ÿà⁄òŸá: $PROJECT_DIR"
echo "   ‚öôÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™: $PROJECT_DIR/config.py"
echo "   ü§ñ ÿ±ÿ®ÿßÿ™: $PROJECT_DIR/bot.py"
echo "   üõ†Ô∏è ŸÖÿØ€åÿ±€åÿ™: $PROJECT_DIR/manage.sh"
echo ""
echo -e "${GREEN}üéâ ŸÖŸàŸÅŸÇ ÿ®ÿßÿ¥€åÿØ!${NC}"
