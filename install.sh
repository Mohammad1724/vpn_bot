#!/bin/bash

# ÿ±ŸÜ⁄Ø‚ÄåŸáÿß ÿ®ÿ±ÿß€å ÿÆÿ±Ÿàÿ¨€å
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ ŸÜÿµÿ® Ÿà ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN${NC}"
echo "==============================================="

# ÿ™ÿßÿ®ÿπ ⁄Ü⁄© ⁄©ÿ±ÿØŸÜ ŸÖŸàŸÅŸÇ€åÿ™ ÿØÿ≥ÿ™Ÿàÿ±
check_success() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1 ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßŸÜÿ¨ÿßŸÖ ÿ¥ÿØ${NC}"
    else
        echo -e "${RED}‚ùå ÿÆÿ∑ÿß ÿØÿ± $1${NC}"
        exit 1
    fi
}

# ÿ®ÿ±ÿ±ÿ≥€å ÿØÿ≥ÿ™ÿ±ÿ≥€å root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}‚ùå ŸÑÿ∑ŸÅÿßŸã ÿ®ÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å root ÿßÿ¨ÿ±ÿß ⁄©ŸÜ€åÿØ (sudo)${NC}"
    exit 1
fi

echo -e "${YELLOW}üì¶ ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ...${NC}"
apt update && apt upgrade -y
check_success "ÿ®Ÿá‚Äåÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ÿ≥€åÿ≥ÿ™ŸÖ"

echo -e "${YELLOW}üêç ŸÜÿµÿ® Python Ÿà ÿßÿ®ÿ≤ÿßÿ±Ÿáÿß€å ŸÖÿ±ÿ®Ÿàÿ∑Ÿá...${NC}"
apt install python3 python3-pip python3-venv git screen nano curl -y
check_success "ŸÜÿµÿ® Python"

# ÿ®ÿ±ÿ±ÿ≥€å ŸÜÿ≥ÿÆŸá Python
PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
echo -e "${GREEN}‚úÖ Python ŸÜÿ≥ÿÆŸá $PYTHON_VERSION ŸÜÿµÿ® ÿ¥ÿØ${NC}"

echo -e "${YELLOW}üìÅ ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å Ÿæÿ±Ÿà⁄òŸá...${NC}"
PROJECT_DIR="/opt/vpn-bot"
mkdir -p $PROJECT_DIR
cd $PROJECT_DIR
check_success "ÿß€åÿ¨ÿßÿØ ÿØÿß€åÿ±⁄©ÿ™Ÿàÿ±€å"

echo -e "${YELLOW}üîß ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å Python...${NC}"
python3 -m venv venv
source venv/bin/activate
check_success "ÿß€åÿ¨ÿßÿØ ŸÖÿ≠€åÿ∑ ŸÖÿ¨ÿßÿ≤€å"

echo -e "${YELLOW}üìö ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß€å ŸÖŸàÿ±ÿØ ŸÜ€åÿßÿ≤...${NC}"
pip install --upgrade pip
pip install -r requirements.txt
check_success "ŸÜÿµÿ® ⁄©ÿ™ÿßÿ®ÿÆÿßŸÜŸá‚ÄåŸáÿß"

echo -e "${YELLOW}üìù ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ‚ÄåŸáÿß€å Ÿæÿ±Ÿà⁄òŸá...${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ config.py
cat > config.py << 'EOF'
"""
ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN
ŸÑÿ∑ŸÅÿßŸã ÿ™ŸÖÿßŸÖ ŸÖŸÇÿßÿØ€åÿ± ÿ±ÿß ÿ®ÿß ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸàÿßŸÇÿπ€å ÿÆŸàÿØ ÿ¨ÿß€å⁄Øÿ≤€åŸÜ ⁄©ŸÜ€åÿØ
"""

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ±ÿ®ÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"

# ŸÑ€åÿ≥ÿ™ ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ‚ÄåŸáÿß
ADMIN_IDS = [123456789] # ÿß€åŸÜÿ¨ÿß ÿ®ÿß€åÿØ ÿ¢€åÿØ€å ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿÆŸàÿØÿ™ÿßŸÜ ÿ±ÿß ŸÇÿ±ÿßÿ± ÿØŸá€åÿØ

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ŸæŸÜŸÑ HiddiFy  
HIDDIFY_API_URL = "https://your-panel.com" # ÿ¢ÿØÿ±ÿ≥ ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß
HIDDIFY_API_KEY = "your-api-key" # API Key ŸæŸÜŸÑ Hiddify ÿ¥ŸÖÿß

# ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ
ZARINPAL_MERCHANT_ID = "" # ⁄©ÿØ ŸÖÿ±⁄ÜŸÜÿ™ ÿ≤ÿ±€åŸÜ ŸæÿßŸÑ ÿ¥ŸÖÿß (ÿßÿÆÿ™€åÿßÿ±€å)

# ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™
CARD_NUMBER = "6037-9977-****-****" # ÿ¥ŸÖÿßÿ±Ÿá ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å ÿ®ÿ±ÿß€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿØÿ≥ÿ™€å
CARD_HOLDER_NAME = "ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™" # ŸÜÿßŸÖ ÿµÿßÿ≠ÿ® ⁄©ÿßÿ±ÿ™ ÿ®ÿßŸÜ⁄©€å

# Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
SUPPORT_USERNAME = "@your_support" # €åŸàÿ≤ÿ±ŸÜ€åŸÖ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å
SUPPORT_PHONE = "09123456789" # ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å

# Ÿàÿ®‚ÄåŸáŸà⁄© (ÿßÿÆÿ™€åÿßÿ±€åÿå ÿ®ÿ±ÿß€å ÿ™ÿ£€å€åÿØ ÿÆŸàÿØ⁄©ÿßÿ± Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)
BOT_WEBHOOK_URL = "" 
EOF

echo -e "${GREEN}‚úÖ ŸÅÿß€åŸÑ config.py ÿß€åÿ¨ÿßÿØ ÿ¥ÿØ${NC}"

# ÿß€åÿ¨ÿßÿØ ŸÅÿß€åŸÑ bot.py
# ÿ™Ÿàÿ¨Ÿá: ŸÖÿ≠ÿ™Ÿàÿß€å ⁄©ÿßŸÖŸÑ bot.py ÿß€åŸÜÿ¨ÿß ŸÇÿ±ÿßÿ± ŸÖ€å‚Äå⁄Ø€åÿ±ÿØ
cat > bot.py << 'EOF'
import telebot
import sqlite3
import json
import requests
from datetime import datetime, timedelta
import uuid
import os
from config import *

class DatabaseManager:
    def __init__(self):
        self.db_name = 'vpn_bot.db'
        self.init_database()
    
    def init_database(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ÿ¨ÿØŸàŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                phone TEXT,
                join_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS services (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                price INTEGER,
                duration_days INTEGER,
                traffic_gb INTEGER,
                description TEXT
            )
        ''')
        
        # ÿ¨ÿØŸàŸÑ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                service_id INTEGER,
                amount INTEGER,
                status TEXT DEFAULT 'pending',
                payment_id TEXT,
                config_url TEXT,
                created_at TEXT,
                expires_at TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
        # ÿßÿ∂ÿßŸÅŸá ⁄©ÿ±ÿØŸÜ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
        self.add_default_services()
    
    def add_default_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM services')
        
        if cursor.fetchone()[0] == 0:
            default_services = [
                ("Ÿæ⁄©€åÿ¨ €± ŸÖÿßŸáŸá - €µ€∞ ⁄Ø€å⁄Ø", 50000, 30, 50, "ŸÖŸÜÿßÿ≥ÿ® ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿ¥ÿÆÿµ€å ÿ±Ÿàÿ≤ÿßŸÜŸá"),
                ("Ÿæ⁄©€åÿ¨ €≥ ŸÖÿßŸáŸá - €±€µ€∞ ⁄Ø€å⁄Ø", 120000, 90, 150, "Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±ÿ™ÿ±€åŸÜ Ÿæ⁄©€åÿ¨ - €≥€≥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ €∂ ŸÖÿßŸáŸá - €≥€∞€∞ ⁄Ø€å⁄Ø", 200000, 180, 300, "ÿ®Ÿáÿ™ÿ±€åŸÜ ŸÇ€åŸÖÿ™ - €¥€¥Ÿ™ ÿ™ÿÆŸÅ€åŸÅ"),
                ("Ÿæ⁄©€åÿ¨ Ÿà€å⁄òŸá - ŸÜÿßŸÖÿ≠ÿØŸàÿØ", 300000, 365, 1000, "€å⁄© ÿ≥ÿßŸÑ ⁄©ÿßŸÖŸÑ ÿ®ÿß ÿ™ÿ±ÿßŸÅ€å⁄© ŸÅÿ±ÿßŸàÿßŸÜ")
            ]
            
            cursor.executemany('''
                INSERT INTO services (name, price, duration_days, traffic_gb, description)
                VALUES (?, ?, ?, ?, ?)
            ''', default_services)
            conn.commit()
        
        conn.close()
    
    def add_user(self, user_id, username):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO users (user_id, username, join_date)
            VALUES (?, ?, ?)
        ''', (user_id, username, datetime.now().isoformat()))
        conn.commit()
        conn.close()
    
    def get_services(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id > 0')
        services = cursor.fetchall()
        conn.close()
        return services
    
    def get_service(self, service_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM services WHERE id = ?', (service_id,))
        service = cursor.fetchone()
        conn.close()
        return service
    
    def add_order(self, user_id, service_id, amount):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        order_id = str(uuid.uuid4())[:8].upper()
        cursor.execute('''
            INSERT INTO orders (user_id, service_id, amount, payment_id, created_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, service_id, amount, order_id, datetime.now().isoformat()))
        conn.commit()
        conn.close()
        return order_id
    
    def get_order(self, order_id):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.*, s.name, s.duration_days, s.traffic_gb 
            FROM orders o 
            JOIN services s ON o.service_id = s.id 
            WHERE o.payment_id = ?
        ''', (order_id,))
        order = cursor.fetchone()
        conn.close()
        return order
    
    def update_order_status(self, order_id, status, config_url=None):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        if config_url:
            order = self.get_order(order_id)
            if order:
                duration_days = order[10] # order[10] is duration_days
                expire_date = datetime.now() + timedelta(days=duration_days)
                cursor.execute('''
                    UPDATE orders 
                    SET status = ?, config_url = ?, expires_at = ?
                    WHERE payment_id = ?
                ''', (status, config_url, expire_date.isoformat(), order_id))
        else:
            cursor.execute('''
                UPDATE orders 
                SET status = ?
                WHERE payment_id = ?
            ''', (status, order_id))
        
        conn.commit()
        conn.close()
    
    def get_stats(self):
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # ⁄©ŸÑ ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        # ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™ ÿßŸÖÿ±Ÿàÿ≤
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('SELECT COUNT(*) FROM orders WHERE created_at LIKE ?', (f'{today}%',))
        today_orders = cursor.fetchone()[0]
        
        # ÿØÿ±ÿ¢ŸÖÿØ ÿßŸÖÿ±Ÿàÿ≤
        cursor.execute('SELECT SUM(amount) FROM orders WHERE created_at LIKE ? AND status = "active"', (f'{today}%',))
        today_income = cursor.fetchone()[0] or 0
        
        # ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ
        cursor.execute('SELECT SUM(amount) FROM orders WHERE status = "active"')
        total_income = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return {
            'total_users': total_users,
            'today_orders': today_orders,
            'today_income': today_income,
            'total_income': total_income
        }

class HiddifyManager:
    def __init__(self):
        self.api_url = HIDDIFY_API_URL.rstrip('/')
        self.api_key = HIDDIFY_API_KEY
    
    def test_connection(self):
        """ÿ™ÿ≥ÿ™ ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá API"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            response = requests.get(f'{self.api_url}/api/v1/admin/user/', 
                                  headers=headers, timeout=10)
            return response.status_code == 200
        except:
            return False
    
    def create_user(self, username, traffic_limit_gb, expire_days):
        """ÿß€åÿ¨ÿßÿØ ⁄©ÿßÿ±ÿ®ÿ± ÿ¨ÿØ€åÿØ ÿØÿ± ŸæŸÜŸÑ HiddiFy"""
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'name': username,
                'usage_limit_GB': traffic_limit_gb,
                'package_days': expire_days,
                'mode': 'no_reset',
                'comment': f'Created by bot - {datetime.now().strftime("%Y-%m-%d %H:%M")}'
            }
            
            response = requests.post(f'{self.api_url}/api/v1/admin/user/', 
                                   json=data, headers=headers, timeout=30)
            
            if response.status_code in [200, 201]:
                result = response.json()
                # Hiddify API might return 'subscription_url' or 'config_url'
                return result.get('subscription_url') or result.get('config_url')
            
            return None
            
        except Exception as e:
            print(f"Error creating user: {e}")
            return None

class PaymentManager:
    def __init__(self):
        self.zarinpal_merchant = ZARINPAL_MERCHANT_ID
    
    def create_payment_url(self, amount, description, order_id):
        """ÿß€åÿ¨ÿßÿØ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™ ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ"""
        if not self.zarinpal_merchant:
            return None
            
        try:
            data = {
                'merchant_id': self.zarinpal_merchant,
                'amount': amount,
                'description': description,
                'callback_url': f'{BOT_WEBHOOK_URL}/verify/{order_id}' if BOT_WEBHOOK_URL else 'https://example.com'
            }
            
            response = requests.post(
                'https://api.zarinpal.com/pg/v4/payment/request.json',
                json=data, timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('data', {}).get('code') == 100:
                    authority = result['data']['authority']
                    return f"https://www.zarinpal.com/pg/StartPay/{authority}"
            
            return None
            
        except:
            return None

# ÿß€åÿ¨ÿßÿØ instance Ÿáÿß
db = DatabaseManager()
hiddify = HiddifyManager()
payment = PaymentManager()
bot = telebot.TeleBot(BOT_TOKEN)

# ⁄©€åÿ®Ÿàÿ±ÿØŸáÿß
def main_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±Ÿà€åÿ≥", callback_data="buy_service"),
        telebot.types.InlineKeyboardButton("üíé ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_services")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìû Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å", callback_data="support"),
        telebot.types.InlineKeyboardButton("‚ÑπÔ∏è ÿ±ÿßŸáŸÜŸÖÿß", callback_data="help")
    )
    return keyboard

def services_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=1)
    services = db.get_services()
    
    for service in services:
        discount = ""
        if service[3] >= 90:  # ÿ®€åÿ¥ ÿßÿ≤ 3 ŸÖÿßŸá
            discount = " üî•"
        
        text = f"üì± {service[1]} - {service[2]:,} ÿ™ŸàŸÖÿßŸÜ{discount}"
        keyboard.add(telebot.types.InlineKeyboardButton(
            text, callback_data=f"service_{service[0]}"
        ))
    
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="back_main"))
    return keyboard

def admin_keyboard():
    keyboard = telebot.types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        telebot.types.InlineKeyboardButton("üìä ÿ¢ŸÖÿßÿ±", callback_data="admin_stats"),
        telebot.types.InlineKeyboardButton("üë• ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ", callback_data="admin_users")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üì¶ ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß", callback_data="admin_services"),
        telebot.types.InlineKeyboardButton("üí∞ ÿ≥ŸÅÿßÿ±ÿ¥ÿßÿ™", callback_data="admin_orders")
    )
    keyboard.add(
        telebot.types.InlineKeyboardButton("üîß ÿ™ÿ≥ÿ™ ÿ≥€åÿ≥ÿ™ŸÖ", callback_data="admin_test"),
        telebot.types.InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="back_main")
    )
    return keyboard

# ŸáŸÜÿØŸÑÿ±Ÿáÿß€å ÿßÿµŸÑ€å
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    db.add_user(user_id, username)
    
    welcome_text = f"""
üî• ÿ≥ŸÑÿßŸÖ {message.from_user.first_name} ÿπÿ≤€åÿ≤!

ÿ®Ÿá ÿ±ÿ®ÿßÿ™ ŸÅÿ±Ÿàÿ¥ VPN Ÿæÿ±ÿ≥ÿ±ÿπÿ™ ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å! üöÄ

üåü Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿÆÿßÿµ ŸÖÿß:
‚úÖ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá ÿ®ÿßŸÑÿß
‚úÖ Ÿæÿß€åÿØÿßÿ±€å €π€π.€πŸ™ 
‚úÖ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å €≤€¥ ÿ≥ÿßÿπÿ™Ÿá
‚úÖ ŸÇ€åŸÖÿ™‚ÄåŸáÿß€å ÿßÿ≥ÿ™ÿ´ŸÜÿß€å€å
‚úÖ ŸÜÿµÿ® ÿ¢ÿ≥ÿßŸÜ ÿ±Ÿà€å ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
‚úÖ ÿ®ÿØŸàŸÜ ŸÇÿ∑ÿπ€å Ÿà ŸÅ€åŸÑÿ™ÿ±€åŸÜ⁄Ø

üíé Ÿà€å⁄òŸá ÿß€åŸÜ ŸÖÿßŸá: ÿ™ÿÆŸÅ€åŸÅ ÿ™ÿß €µ€∞Ÿ™ ÿ±Ÿà€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!

ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ €å⁄©€å ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ÿ≤€åÿ± ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id in ADMIN_IDS:
        admin_text = """
üîß ŸæŸÜŸÑ ŸÖÿØ€åÿ±€åÿ™ ÿ±ÿ®ÿßÿ™

ÿÆŸàÿ¥ ÿßŸàŸÖÿØ€å ŸÖÿØ€åÿ± ÿπÿ≤€åÿ≤!
ÿßÿ≤ ŸÖŸÜŸà€å ÿ≤€åÿ± ⁄Øÿ≤€åŸÜŸá ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
        bot.send_message(message.chat.id, admin_text, reply_markup=admin_keyboard())
    else:
        bot.reply_to(message, "‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿßÿØŸÖ€åŸÜ ŸÜÿØÿßÿ±€åÿØ!")

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    user_id = call.from_user.id
    
    try:
        if call.data == "buy_service":
            show_services(call)
        
        elif call.data.startswith("service_"):
            service_id = int(call.data.split("_")[1])
            show_service_details(call, service_id)
        
        elif call.data.startswith("buy_"):
            service_id = int(call.data.split("_")[1])
            start_purchase(call, service_id)
        
        elif call.data.startswith("paid_"):
            order_id = call.data.split("_")[1]
            handle_payment_confirmation(call, order_id)
        
        elif call.data == "my_services":
            show_user_services(call)
        
        elif call.data == "support":
            show_support_info(call)
        
        elif call.data == "help":
            show_help(call)
        
        elif call.data == "back_main":
            show_main_menu(call)
        
        # ÿßÿØŸÖ€åŸÜ handlers
        elif call.data.startswith("admin_") and user_id in ADMIN_IDS:
            handle_admin_callback(call)
            
    except Exception as e:
        bot.answer_callback_query(call.id, "‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™!")
        print(f"Callback error: {e}")

def show_services(call):
    text = """
üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å VPN

üíé Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å Ÿà€å⁄òŸá ŸÖÿß:

üî• ÿ™ÿÆŸÅ€åŸÅ‚ÄåŸáÿß€å Ÿà€å⁄òŸá ÿ®ÿ±ÿß€å Ÿæ⁄©€åÿ¨‚ÄåŸáÿß€å ÿ®ŸÑŸÜÿØŸÖÿØÿ™!
‚ö° ÿ≥ÿ±ÿπÿ™ ÿ®ÿßŸÑÿß Ÿà Ÿæÿß€åÿØÿßÿ±€å ÿ™ÿ∂ŸÖ€åŸÜ€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß Ÿà ÿßŸæŸÑ€å⁄©€åÿ¥ŸÜ‚ÄåŸáÿß

Ÿæ⁄©€åÿ¨ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ±ÿ™ ÿ±Ÿà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ:
"""
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=services_keyboard())

def show_service_details(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    # ŸÖÿ≠ÿßÿ≥ÿ®Ÿá ÿ™ÿÆŸÅ€åŸÅ
    discount_text = ""
    if service[3] >= 180:  # 6 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €¥€¥Ÿ™ - Ÿæ€åÿ¥ŸÜŸáÿßÿØ Ÿà€å⁄òŸá!"
    elif service[3] >= 90:  # 3 ŸÖÿßŸá €åÿß ÿ®€åÿ¥ÿ™ÿ±
        discount_text = "\nüî• ÿ™ÿÆŸÅ€åŸÅ €≥€≥Ÿ™ - Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ±!"
    
    text = f"""
üì± {service[1]}

üí∞ ŸÇ€åŸÖÿ™: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
‚è± ŸÖÿØÿ™: {service[3]} ÿ±Ÿàÿ≤  
üìä ÿ≠ÿ¨ŸÖ: {service[4]} ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™
üìù {service[5]}{discount_text}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ú® ŸÖÿ≤ÿß€åÿß€å ÿß€åŸÜ Ÿæ⁄©€åÿ¨:

üöÄ ÿ≥ÿ±ÿπÿ™ ŸÅŸàŸÇ‚ÄåÿßŸÑÿπÿßÿØŸá (ÿ™ÿß €∏€∞ ŸÖ⁄Ø)
üõ°Ô∏è ÿßŸÖŸÜ€åÿ™ ⁄©ÿßŸÖŸÑ Ÿà ÿ±ŸÖÿ≤⁄Øÿ∞ÿßÿ±€å ŸÇŸà€å
üåç ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ™ŸÖÿßŸÖ ÿ≥ÿß€åÿ™‚ÄåŸáÿß
üì± ÿ≥ÿßÿ≤⁄Øÿßÿ± ÿ®ÿß ŸáŸÖŸá ÿØÿ≥ÿ™⁄ØÿßŸá‚ÄåŸáÿß
üîÑ Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ÿßÿ≤ ŸáŸÖŸá Ÿæÿ±Ÿàÿ™⁄©ŸÑ‚ÄåŸáÿß
‚ö° ÿßÿ™ÿµÿßŸÑ ŸÅŸàÿ±€å ÿ®ÿØŸàŸÜ ÿ™ÿ£ÿÆ€åÿ±
üéØ IP ÿßÿÆÿ™ÿµÿßÿµ€å Ÿà ÿ™ŸÖ€åÿ≤

üíé ⁄Øÿßÿ±ÿßŸÜÿ™€å €±€∞€∞Ÿ™ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ Ÿàÿ¨Ÿá ÿØÿ± ÿµŸàÿ±ÿ™ ÿπÿØŸÖ ÿ±ÿ∂ÿß€åÿ™
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(telebot.types.InlineKeyboardButton(
        f"üí≥ ÿÆÿ±€åÿØ {service[2]:,} ÿ™ŸàŸÖÿßŸÜ", 
        callback_data=f"buy_{service_id}"
    ))
    keyboard.add(telebot.types.InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="buy_service"))
    
    bot.edit_message_text(text, call.message.chat.id, 
                        call.message.message_id, reply_markup=keyboard)

def start_purchase(call, service_id):
    service = db.get_service(service_id)
    if not service:
        bot.answer_callback_query(call.id, "‚ùå ÿ≥ÿ±Ÿà€åÿ≥ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ!")
        return
    
    user_id = call.from_user.id
    order_id = db.add_order(user_id, service_id, service[2])
    
    # ÿ≥ÿßÿÆÿ™ ŸÑ€åŸÜ⁄© Ÿæÿ±ÿØÿßÿÆÿ™
    payment_url = payment.create_payment_url(
        service[2], 
        f"ÿÆÿ±€åÿØ {service[1]}", 
        order_id
    )
    
    payment_text = f"""
üí≥ ÿµŸàÿ±ÿ™ÿ≠ÿ≥ÿßÿ® ÿÆÿ±€åÿØ

üì± ÿ≥ÿ±Ÿà€åÿ≥: {service[1]}
üí∞ ŸÖÿ®ŸÑÿ∫: {service[2]:,} ÿ™ŸàŸÖÿßŸÜ
üÜî ÿ¥ŸÖÿßÿ±Ÿá ÿ≥ŸÅÿßÿ±ÿ¥: #{order_id}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üí≥ ÿ±Ÿàÿ¥‚ÄåŸáÿß€å Ÿæÿ±ÿØÿßÿÆÿ™:
"""
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    
    if payment_url:
        keyboard.add(telebot.types.InlineKeyboardButton(
            "üí≥ Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¢ŸÜŸÑÿß€åŸÜ (ÿ≤ÿ±€åŸÜ‚ÄåŸæÿßŸÑ)", url=payment_url
        ))
    
    # ÿßÿ∑ŸÑÿßÿπÿßÿ™ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™
    if CARD_NUMBER:
        payment_text += f"""

üí≥ ⁄©ÿßÿ±ÿ™ ÿ®Ÿá ⁄©ÿßÿ±ÿ™:
